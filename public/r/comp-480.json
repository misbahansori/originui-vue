{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-480",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-480.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useVueTable,\n  type ColumnDef,\n  type SortingState,\n} from \"@tanstack/vue-table\";\nimport {\n  LucideArrowLeftToLine,\n  LucideArrowRightToLine,\n  LucideEllipsis,\n  LucidePinOff,\n} from \"lucide-vue-next\";\nimport { h, onMounted, ref } from \"vue\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n  department: string;\n  role: string;\n  joinDate: string;\n  lastActive: string;\n  performance: \"Excellent\" | \"Good\" | \"Average\" | \"Poor\";\n};\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) =>\n      h(\"div\", { class: \"truncate font-medium\" }, row.getValue(\"name\")),\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) =>\n      h(\"div\", { class: \"truncate\" }, [\n        h(\n          \"span\",\n          { class: \"text-lg leading-none\" },\n          row.original.flag as string,\n        ),\n        \" \",\n        row.getValue(\"location\") as string,\n      ]),\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n  },\n  {\n    header: \"Balance\",\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n    },\n  },\n  {\n    header: \"Department\",\n    accessorKey: \"department\",\n  },\n  {\n    header: \"Role\",\n    accessorKey: \"role\",\n  },\n  {\n    header: \"Join Date\",\n    accessorKey: \"joinDate\",\n  },\n  {\n    header: \"Last Active\",\n    accessorKey: \"lastActive\",\n  },\n  {\n    header: \"Performance\",\n    accessorKey: \"performance\",\n  },\n];\n\nconst data = ref<Item[]>([]);\nconst sorting = ref<SortingState>([]);\n\nonMounted(async () => {\n  const res = await $fetch(\"/api/users\");\n\n  data.value = res.slice(0, 5);\n});\n\nconst table = useVueTable({\n  get data() {\n    return data.value;\n  },\n  columns,\n  columnResizeMode: \"onChange\",\n  getCoreRowModel: getCoreRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  state: {\n    get sorting() {\n      return sorting.value;\n    },\n  },\n  onSortingChange: (updaterOrValue) => {\n    sorting.value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(sorting.value)\n        : updaterOrValue;\n  },\n  enableSortingRemoval: false,\n  enableColumnPinning: true,\n});\n</script>\n\n<template>\n  <div>\n    <Table\n      class=\"table-fixed\"\n      :style=\"{\n        width: table.getCenterTotalSize(),\n      }\"\n    >\n      <TableHeader>\n        <TableRow\n          v-for=\"headerGroup in table.getHeaderGroups()\"\n          :key=\"headerGroup.id\"\n          class=\"bg-muted/50\"\n        >\n          <TableHead\n            v-for=\"header in headerGroup.headers\"\n            :key=\"header.id\"\n            class=\"relative h-10 border-t select-none last:[&>.cursor-col-resize]:opacity-0\"\n            :colspan=\"header.colSpan\"\n            :style=\"{\n              width: header.getSize() + 'px',\n            }\"\n          >\n            <div class=\"flex items-center justify-between gap-2\">\n              <span class=\"truncate\" v-if=\"!header.isPlaceholder\">\n                <FlexRender\n                  :render=\"header.column.columnDef.header\"\n                  :props=\"header.getContext()\"\n                />\n              </span>\n              <!-- Pin/Unpin column controls with enhanced accessibility -->\n              <template\n                v-if=\"!header.isPlaceholder && header.column.getCanPin()\"\n              >\n                <Button\n                  v-if=\"header.column.getIsPinned()\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  class=\"-mr-1 size-7 shadow-none\"\n                  @click=\"header.column.pin(false)\"\n                  :aria-label=\"`Unpin ${header.column.columnDef.header} column`\"\n                  :title=\"`Unpin ${header.column.columnDef.header} column`\"\n                >\n                  <LucidePinOff :size=\"16\" class=\"opacity-60\" />\n                </Button>\n                <DropdownMenu v-else>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      class=\"-mr-1 size-7 shadow-none\"\n                      :aria-label=\"`Pin options for ${header.column.columnDef.header} column`\"\n                      :title=\"`Pin options for ${header.column.columnDef.header} column`\"\n                    >\n                      <LucideEllipsis :size=\"16\" class=\"opacity-60\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem @click=\"header.column.pin('left')\">\n                      <LucideArrowLeftToLine :size=\"16\" class=\"opacity-60\" />\n                      Stick to left\n                    </DropdownMenuItem>\n                    <DropdownMenuItem @click=\"header.column.pin('right')\">\n                      <LucideArrowRightToLine :size=\"16\" class=\"opacity-60\" />\n                      Stick to right\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </template>\n              <div\n                v-if=\"header.column.getCanResize()\"\n                @dblclick=\"header.column.resetSize()\"\n                @mousedown=\"header.getResizeHandler()?.($event)\"\n                @touchstart=\"header.getResizeHandler()?.($event)\"\n                class=\"user-select-none before:bg-border absolute top-0 -right-2 z-10 flex h-full w-4 cursor-col-resize touch-none justify-center before:absolute before:inset-y-0 before:w-px before:translate-x-px\"\n              />\n            </div>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <template v-if=\"table.getRowModel().rows?.length\">\n          <TableRow\n            v-for=\"row in table.getRowModel().rows\"\n            :key=\"row.id\"\n            :data-state=\"row.getIsSelected() && 'selected'\"\n          >\n            <TableCell\n              v-for=\"cell in row.getVisibleCells()\"\n              :key=\"cell.id\"\n              class=\"truncate\"\n            >\n              <FlexRender\n                :render=\"cell.column.columnDef.cell\"\n                :props=\"cell.getContext()\"\n              />\n            </TableCell>\n          </TableRow>\n        </template>\n        <TableRow v-else>\n          <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n            No results.\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n    <p class=\"text-muted-foreground mt-4 text-center text-sm\">\n      Pinnable columns made with\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://tanstack.com/table\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TanStack Table\n      </a>\n    </p>\n  </div>\n</template>\n\n<style scoped>\n/* Remove the old dropdown styles since we're using the DropdownMenu component */\n</style>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "flag",
      "sticky",
      "resize"
    ],
    "colSpan": 3
  },
  "dependencies": [
    "@tanstack",
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/dropdown-menu.json",
    "https://originui-vue.com/r/table.json"
  ]
}