{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-570",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-570.vue",
      "content": "<script setup lang=\"ts\">\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Tree, TreeItem, TreeItemLabel } from \"@/registry/default/ui/tree\";\nimport { LucideFile, LucideFolder, LucideFolderOpen } from \"lucide-vue-next\";\nimport { ref } from \"vue\";\n\ninterface Item {\n  name: string;\n  children?: Item[];\n}\n\nconst items = ref<Item[]>([\n  {\n    name: \"Engineering\",\n    children: [\n      {\n        name: \"Frontend\",\n        children: [\n          {\n            name: \"Design System\",\n            children: [\n              { name: \"Components\" },\n              { name: \"Tokens\" },\n              { name: \"Guidelines\" },\n            ],\n          },\n          { name: \"Web Platform\" },\n        ],\n      },\n      {\n        name: \"Backend\",\n        children: [{ name: \"APIs\" }, { name: \"Infrastructure\" }],\n      },\n      { name: \"Platform Team\" },\n    ],\n  },\n  {\n    name: \"Marketing\",\n    children: [{ name: \"Content\" }, { name: \"SEO\" }],\n  },\n  {\n    name: \"Operations\",\n    children: [{ name: \"HR\" }, { name: \"Finance\" }],\n  },\n]);\n\nconst renamingItem = ref<string | null>(null);\nconst renameValue = ref(\"\");\nconst inputRefs = ref<InstanceType<typeof Input>[]>([]);\n\nconst startRenaming = (item: Item) => {\n  renamingItem.value = item.name;\n  renameValue.value = item.name;\n\n  nextTick(() => {\n    inputRefs.value[0]?.$el.focus();\n  });\n};\n\nconst handleRename = (item: Item) => {\n  if (renamingItem.value === item.name) {\n    item.name = renameValue.value;\n    renamingItem.value = null;\n  }\n};\n\nconst handleKeyDown = (e: KeyboardEvent, item: Item) => {\n  if (e.key === \"F2\") {\n    e.preventDefault();\n    startRenaming(item);\n  } else if (e.key === \"Enter\" && renamingItem.value === item.name) {\n    handleRename(item);\n  } else if (e.key === \"Escape\") {\n    renamingItem.value = null;\n  }\n};\n</script>\n\n<template>\n  <div class=\"flex h-full flex-col gap-2 *:first:grow\">\n    <div>\n      <Tree\n        :items=\"items\"\n        :getKey=\"(item) => item.name\"\n        v-slot=\"{ flattenItems }\"\n        :defaultExpanded=\"['Engineering', 'Frontend', 'Design System']\"\n      >\n        <TreeItem\n          v-for=\"item in flattenItems\"\n          v-bind=\"item\"\n          v-slot=\"{ isExpanded }\"\n          @keydown=\"(e: KeyboardEvent) => handleKeyDown(e, item.value)\"\n        >\n          <TreeItemLabel\n            :hasChildren=\"item.hasChildren\"\n            class=\"before:bg-background relative before:absolute before:inset-x-0 before:-inset-y-0.5 before:-z-10\"\n          >\n            <span class=\"flex flex-1 items-center gap-2\">\n              <template v-if=\"item.hasChildren\">\n                <LucideFolderOpen\n                  v-if=\"isExpanded\"\n                  class=\"text-muted-foreground pointer-events-none size-4\"\n                />\n                <LucideFolder\n                  v-else\n                  class=\"text-muted-foreground pointer-events-none size-4\"\n                />\n              </template>\n              <LucideFile\n                v-else\n                class=\"text-muted-foreground pointer-events-none size-4\"\n              />\n              <template v-if=\"renamingItem === item.value.name\">\n                <Input\n                  ref=\"inputRefs\"\n                  v-model=\"renameValue\"\n                  class=\"-my-0.5 h-6 px-1\"\n                  @blur=\"handleRename(item.value)\"\n                  @keydown.enter=\"handleRename(item.value)\"\n                  @keydown.escape=\"renamingItem = null\"\n                  autofocus\n                />\n              </template>\n              <template v-else>\n                {{ item.value.name }}\n              </template>\n            </span>\n          </TreeItemLabel>\n        </TreeItem>\n      </Tree>\n    </div>\n    <p\n      aria-live=\"polite\"\n      role=\"region\"\n      class=\"text-muted-foreground mt-2 text-xs\"\n    >\n      Tree with renaming (press F2 to rename) âˆ™\n      <a\n        href=\"https://reka-ui.com/docs/components/tree\"\n        class=\"hover:text-foreground underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Reka UI Tree\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "tree"
    ],
    "colSpan": 1
  },
  "dependencies": [
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/input.json",
    "https://originui-vue.com/r/tree.json"
  ]
}