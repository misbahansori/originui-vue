{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-485",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-485.vue",
      "content": "<script setup lang=\"ts\">\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/registry/default/ui/alert-dialog\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport {\n  Pagination,\n  PaginationContent,\n} from \"@/registry/default/ui/pagination\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/default/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport { valueUpdater } from \"@/registry/default/ui/table/utils\";\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useVueTable,\n  type ColumnDef,\n  type ColumnFiltersState,\n  type FilterFn,\n  type PaginationState,\n  type Row,\n  type RowSelectionState,\n  type SortingState,\n  type VisibilityState,\n} from \"@tanstack/vue-table\";\nimport {\n  Ellipsis,\n  LucideChevronDown,\n  LucideChevronFirst,\n  LucideChevronLast,\n  LucideChevronLeft,\n  LucideChevronRight,\n  LucideChevronUp,\n  LucideCircleAlert,\n  LucideCircleX,\n  LucideColumns3,\n  LucideFilter,\n  LucideListFilter,\n  LucidePlus,\n  LucideTrash,\n} from \"lucide-vue-next\";\nimport { computed, h, onMounted, ref } from \"vue\";\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n};\n\n// Custom filter function for multi-column searching\nconst multiColumnFilterFn: FilterFn<Item> = (row, columnId, filterValue) => {\n  const searchableRowContent =\n    `${row.original.name} ${row.original.email}`.toLowerCase();\n  const searchTerm = (filterValue ?? \"\").toLowerCase();\n  return searchableRowContent.includes(searchTerm);\n};\n\nconst statusFilterFn: FilterFn<Item> = (\n  row,\n  columnId,\n  filterValue: string[],\n) => {\n  if (!filterValue?.length) return true;\n  const status = row.getValue(columnId) as string;\n  return filterValue.includes(status);\n};\n\nconst data = ref<Item[]>([]);\nconst rowSelection = ref<RowSelectionState>({});\nconst columnFilters = ref<ColumnFiltersState>([]);\nconst columnVisibility = ref<VisibilityState>({});\nconst pagination = ref<PaginationState>({\n  pageIndex: 0,\n  pageSize: 10,\n});\nconst sorting = ref<SortingState>([\n  {\n    id: \"name\",\n    desc: false,\n  },\n]);\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) =>\n      h(Checkbox, {\n        modelValue:\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\"),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          table.toggleAllPageRowsSelected(!!value),\n        \"aria-label\": \"Select all\",\n      }),\n    cell: ({ row }) =>\n      h(Checkbox, {\n        modelValue: row.getIsSelected(),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          row.toggleSelected(!!value),\n        \"aria-label\": \"Select row\",\n      }),\n    size: 28,\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) => h(\"div\", { class: \"font-medium\" }, row.getValue(\"name\")),\n    size: 180,\n    filterFn: multiColumnFilterFn,\n    enableHiding: false,\n    sortUndefined: \"last\",\n    sortDescFirst: false,\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n    size: 220,\n    sortUndefined: \"last\",\n    sortDescFirst: false,\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) =>\n      h(\"div\", {}, [\n        h(\n          \"span\",\n          { class: \"text-lg leading-none\" },\n          row.original.flag as string,\n        ),\n        \" \",\n        row.getValue(\"location\") as string,\n      ]),\n    size: 180,\n    sortUndefined: \"last\",\n    sortDescFirst: false,\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n    cell: ({ row }) =>\n      h(\n        Badge,\n        {\n          class:\n            row.getValue(\"status\") === \"Inactive\"\n              ? \"bg-muted-foreground/60 text-primary-foreground\"\n              : \"\",\n        },\n        () => row.getValue(\"status\"),\n      ),\n    size: 100,\n    filterFn: statusFilterFn,\n    sortUndefined: \"last\",\n    sortDescFirst: false,\n  },\n  {\n    header: \"Performance\",\n    accessorKey: \"performance\",\n    sortUndefined: \"last\",\n    sortDescFirst: false,\n  },\n  {\n    header: \"Balance\",\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return formatted;\n    },\n    size: 120,\n    sortUndefined: \"last\",\n    sortDescFirst: false,\n  },\n  {\n    id: \"actions\",\n    header: () => h(\"span\", { class: \"sr-only\" }, \"Actions\"),\n    cell: ({ row }) => h(RowActions, { row }),\n    size: 60,\n    enableHiding: false,\n  },\n];\n\nonMounted(async () => {\n  try {\n    const res = await $fetch(\"/api/users\");\n    data.value = res;\n  } catch (error) {\n    console.error(\"Failed to fetch data:\", error);\n  }\n});\n\nconst table = useVueTable({\n  get data() {\n    return data.value;\n  },\n  get columns() {\n    return columns;\n  },\n  getCoreRowModel: getCoreRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  getFacetedUniqueValues: getFacetedUniqueValues(),\n  state: {\n    get rowSelection() {\n      return rowSelection.value;\n    },\n    get pagination() {\n      return pagination.value;\n    },\n    get sorting() {\n      return sorting.value;\n    },\n    get columnFilters() {\n      return columnFilters.value;\n    },\n    get columnVisibility() {\n      return columnVisibility.value;\n    },\n  },\n  onSortingChange: (updater) => valueUpdater(updater, sorting),\n  onPaginationChange: (updater) => valueUpdater(updater, pagination),\n  onColumnFiltersChange: (updater) => valueUpdater(updater, columnFilters),\n  onColumnVisibilityChange: (updater) =>\n    valueUpdater(updater, columnVisibility),\n  onRowSelectionChange: (updater) => valueUpdater(updater, rowSelection),\n  enableSortingRemoval: false,\n});\n\n// Get unique status values\nconst uniqueStatusValues = computed(() => {\n  const statusColumn = table.getColumn(\"status\");\n  if (!statusColumn) return [];\n  const values = Array.from(statusColumn.getFacetedUniqueValues().keys());\n  return values.sort();\n});\n\n// Get counts for each status\nconst statusCounts = computed(() => {\n  const statusColumn = table.getColumn(\"status\");\n  if (!statusColumn) return new Map();\n  return statusColumn.getFacetedUniqueValues();\n});\n\nconst selectedStatuses = computed(() => {\n  const filterValue = table.getColumn(\"status\")?.getFilterValue() as string[];\n  return filterValue ?? [];\n});\n\nconst handleStatusChange = (checked: boolean, value: string) => {\n  const filterValue = table.getColumn(\"status\")?.getFilterValue() as string[];\n  const newFilterValue = filterValue ? [...filterValue] : [];\n\n  if (checked) {\n    newFilterValue.push(value);\n  } else {\n    const index = newFilterValue.indexOf(value);\n    if (index > -1) {\n      newFilterValue.splice(index, 1);\n    }\n  }\n\n  table\n    .getColumn(\"status\")\n    ?.setFilterValue(newFilterValue.length ? newFilterValue : undefined);\n};\n\nconst handleDeleteRows = () => {\n  const selectedRows = table.getSelectedRowModel().rows;\n  const updatedData = data.value.filter(\n    (item) => !selectedRows.some((row) => row.original.id === item.id),\n  );\n  data.value = updatedData;\n  table.resetRowSelection();\n};\n\n// RowActions component\nconst RowActions = ({ row }: { row: Row<Item> }) => {\n  return h(\n    DropdownMenu,\n    {},\n    {\n      trigger: () =>\n        h(DropdownMenuTrigger, { asChild: true }, () =>\n          h(\"div\", { class: \"flex justify-end\" }, [\n            h(\n              Button,\n              {\n                size: \"icon\",\n                variant: \"ghost\",\n                class: \"shadow-none\",\n                \"aria-label\": \"Edit item\",\n              },\n              () => h(Ellipsis, { size: 16, \"aria-hidden\": \"true\" }),\n            ),\n          ]),\n        ),\n      default: () =>\n        h(DropdownMenuContent, { align: \"end\" }, [\n          h(DropdownMenuGroup, {}, [\n            h(DropdownMenuItem, {}, [\n              h(\"span\", {}, \"Edit\"),\n              h(DropdownMenuShortcut, {}, \"âŒ˜E\"),\n            ]),\n            h(DropdownMenuItem, {}, [\n              h(\"span\", {}, \"Duplicate\"),\n              h(DropdownMenuShortcut, {}, \"âŒ˜D\"),\n            ]),\n          ]),\n          h(DropdownMenuSeparator),\n          h(DropdownMenuGroup, {}, [\n            h(DropdownMenuItem, {}, [\n              h(\"span\", {}, \"Archive\"),\n              h(DropdownMenuShortcut, {}, \"âŒ˜A\"),\n            ]),\n            h(\n              DropdownMenuSub,\n              {},\n              {\n                trigger: () => h(DropdownMenuSubTrigger, {}, \"More\"),\n                content: () =>\n                  h(DropdownMenuPortal, {}, () =>\n                    h(DropdownMenuSubContent, {}, [\n                      h(DropdownMenuItem, {}, \"Move to project\"),\n                      h(DropdownMenuItem, {}, \"Move to folder\"),\n                      h(DropdownMenuSeparator),\n                      h(DropdownMenuItem, {}, \"Advanced options\"),\n                    ]),\n                  ),\n              },\n            ),\n          ]),\n          h(DropdownMenuSeparator),\n          h(DropdownMenuGroup, {}, [\n            h(DropdownMenuItem, {}, \"Share\"),\n            h(DropdownMenuItem, {}, \"Add to favorites\"),\n          ]),\n          h(DropdownMenuSeparator),\n          h(\n            DropdownMenuItem,\n            { class: \"text-destructive focus:text-destructive\" },\n            [h(\"span\", {}, \"Delete\"), h(DropdownMenuShortcut, {}, \"âŒ˜âŒ«\")],\n          ),\n        ]),\n    },\n  );\n};\n</script>\n\n<template>\n  <div class=\"space-y-4\">\n    <div class=\"flex flex-wrap items-center justify-between gap-3\">\n      <div class=\"flex items-center gap-3\">\n        <div class=\"relative\">\n          <Input\n            class=\"peer min-w-60 ps-9\"\n            :class=\"\n              Boolean(table.getColumn('name')?.getFilterValue()) && 'pe-9'\n            \"\n            :model-value=\"\n              (table.getColumn('name')?.getFilterValue() ?? '') as string\n            \"\n            @update:model-value=\"\n              (value) => table.getColumn('name')?.setFilterValue(value)\n            \"\n            placeholder=\"Filter by name or email...\"\n            type=\"text\"\n            aria-label=\"Filter by name or email\"\n          />\n          <div\n            class=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\"\n          >\n            <LucideListFilter :size=\"16\" aria-hidden=\"true\" />\n          </div>\n          <button\n            v-if=\"Boolean(table.getColumn('name')?.getFilterValue())\"\n            class=\"text-muted-foreground/80 hover:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 absolute inset-y-0 end-0 flex h-full w-9 items-center justify-center rounded-e-md transition-[color,box-shadow] outline-none focus:z-10 focus-visible:ring-[3px] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\"\n            aria-label=\"Clear filter\"\n            @click=\"\n              () => {\n                table.getColumn('name')?.setFilterValue('');\n              }\n            \"\n          >\n            <LucideCircleX :size=\"16\" aria-hidden=\"true\" />\n          </button>\n        </div>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\">\n              <LucideFilter\n                class=\"-ms-1 opacity-60\"\n                :size=\"16\"\n                aria-hidden=\"true\"\n              />\n              Status\n              <span\n                v-if=\"selectedStatuses.length > 0\"\n                class=\"bg-background text-muted-foreground/70 -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\"\n              >\n                {{ selectedStatuses.length }}\n              </span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent class=\"w-auto min-w-36 p-3\" align=\"start\">\n            <div class=\"space-y-3\">\n              <div class=\"text-muted-foreground text-xs font-medium\">\n                Filters\n              </div>\n              <div class=\"space-y-3\">\n                <div\n                  v-for=\"(value, i) in uniqueStatusValues\"\n                  :key=\"value\"\n                  class=\"flex items-center gap-2\"\n                >\n                  <Checkbox\n                    :id=\"`status-${i}`\"\n                    :model-value=\"selectedStatuses.includes(value)\"\n                    @update:model-value=\"\n                      (checked: boolean | 'indeterminate') =>\n                        handleStatusChange(!!checked, value)\n                    \"\n                  />\n                  <Label\n                    :for=\"`status-${i}`\"\n                    class=\"flex grow justify-between gap-2 font-normal\"\n                  >\n                    {{ value }}\n                    <span class=\"text-muted-foreground ms-2 text-xs\">\n                      {{ statusCounts.get(value) }}\n                    </span>\n                  </Label>\n                </div>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\">\n              <LucideColumns3\n                class=\"-ms-1 opacity-60\"\n                :size=\"16\"\n                aria-hidden=\"true\"\n              />\n              View\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel class=\"text-muted-foreground text-xs\">\n              Toggle columns\n            </DropdownMenuLabel>\n            <DropdownMenuCheckboxItem\n              v-for=\"column in table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\"\n              :key=\"column.id\"\n              class=\"capitalize\"\n              :model-value=\"column.getIsVisible()\"\n              @update:model-value=\"(value) => column.toggleVisibility(!!value)\"\n              @select=\"(event) => event.preventDefault()\"\n            >\n              {{ column.id }}\n            </DropdownMenuCheckboxItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div class=\"flex items-center gap-3\">\n        <AlertDialog v-if=\"table.getSelectedRowModel().rows.length > 0\">\n          <AlertDialogTrigger asChild>\n            <Button class=\"ml-auto\" variant=\"outline\">\n              <LucideTrash\n                class=\"-ms-1 opacity-60\"\n                :size=\"16\"\n                aria-hidden=\"true\"\n              />\n              Delete\n              <span\n                class=\"bg-background text-muted-foreground/70 -me-1 inline-flex h-5 max-h-full items-center rounded border px-1 font-[inherit] text-[0.625rem] font-medium\"\n              >\n                {{ table.getSelectedRowModel().rows.length }}\n              </span>\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <div\n              class=\"flex flex-col gap-2 max-sm:items-center sm:flex-row sm:gap-4\"\n            >\n              <div\n                class=\"flex size-9 shrink-0 items-center justify-center rounded-full border\"\n                aria-hidden=\"true\"\n              >\n                <LucideCircleAlert class=\"opacity-80\" :size=\"16\" />\n              </div>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  This action cannot be undone. This will permanently delete\n                  {{ table.getSelectedRowModel().rows.length }} selected\n                  {{\n                    table.getSelectedRowModel().rows.length === 1\n                      ? \"row\"\n                      : \"rows\"\n                  }}.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n            </div>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction @click=\"handleDeleteRows\">\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n        <Button class=\"ml-auto\" variant=\"outline\">\n          <LucidePlus class=\"-ms-1 opacity-60\" :size=\"16\" aria-hidden=\"true\" />\n          Add user\n        </Button>\n      </div>\n    </div>\n\n    <div class=\"bg-background overflow-hidden rounded-md border\">\n      <Table class=\"table-fixed\">\n        <TableHeader>\n          <TableRow\n            v-for=\"headerGroup in table.getHeaderGroups()\"\n            :key=\"headerGroup.id\"\n            class=\"hover:bg-transparent\"\n          >\n            <TableHead\n              v-for=\"header in headerGroup.headers\"\n              :key=\"header.id\"\n              :style=\"{ width: `${header.getSize()}px` }\"\n              class=\"h-11\"\n            >\n              <template v-if=\"!header.isPlaceholder\">\n                <div\n                  v-if=\"header.column.getCanSort()\"\n                  class=\"flex h-full cursor-pointer items-center justify-between gap-2 select-none\"\n                  @click=\"header.column.getToggleSortingHandler()?.($event)\"\n                  @keydown=\"\n                    (e) => {\n                      if (\n                        header.column.getCanSort() &&\n                        (e.key === 'Enter' || e.key === ' ')\n                      ) {\n                        e.preventDefault();\n                        header.column.getToggleSortingHandler()?.(e);\n                      }\n                    }\n                  \"\n                  tabindex=\"0\"\n                >\n                  <FlexRender\n                    :render=\"header.column.columnDef.header\"\n                    :props=\"header.getContext()\"\n                  />\n                  <LucideChevronUp\n                    v-if=\"header.column.getIsSorted() === 'asc'\"\n                    class=\"shrink-0 opacity-60\"\n                    :size=\"16\"\n                    aria-hidden=\"true\"\n                  />\n                  <LucideChevronDown\n                    v-else-if=\"header.column.getIsSorted() === 'desc'\"\n                    class=\"shrink-0 opacity-60\"\n                    :size=\"16\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <FlexRender\n                  v-else\n                  :render=\"header.column.columnDef.header\"\n                  :props=\"header.getContext()\"\n                />\n              </template>\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <template v-if=\"table.getRowModel().rows?.length\">\n            <TableRow\n              v-for=\"row in table.getRowModel().rows\"\n              :key=\"row.id\"\n              :data-state=\"row.getIsSelected() && 'selected'\"\n            >\n              <TableCell\n                v-for=\"cell in row.getVisibleCells()\"\n                :key=\"cell.id\"\n                class=\"last:py-0\"\n              >\n                <FlexRender\n                  :render=\"cell.column.columnDef.cell\"\n                  :props=\"cell.getContext()\"\n                />\n              </TableCell>\n            </TableRow>\n          </template>\n          <TableRow v-else>\n            <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n              No results.\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n\n    <div class=\"flex items-center justify-between gap-8\">\n      <div class=\"flex items-center gap-3\">\n        <Label class=\"max-sm:sr-only\">Rows per page</Label>\n        <Select\n          :model-value=\"table.getState().pagination.pageSize.toString()\"\n          @update:model-value=\"(value) => table.setPageSize(Number(value))\"\n        >\n          <SelectTrigger class=\"w-fit whitespace-nowrap\">\n            <SelectValue placeholder=\"Select number of results\" />\n          </SelectTrigger>\n          <SelectContent\n            class=\"[&_*[role=option]]:ps-2 [&_*[role=option]]:pe-8 [&_*[role=option]>span]:start-auto [&_*[role=option]>span]:end-2\"\n          >\n            <SelectItem\n              v-for=\"pageSize in [5, 10, 25, 50]\"\n              :key=\"pageSize\"\n              :value=\"pageSize.toString()\"\n            >\n              {{ pageSize }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <div\n        class=\"text-muted-foreground flex grow justify-end text-sm whitespace-nowrap\"\n      >\n        <p\n          class=\"text-muted-foreground text-sm whitespace-nowrap\"\n          aria-live=\"polite\"\n        >\n          <span class=\"text-foreground\">\n            {{\n              table.getState().pagination.pageIndex *\n                table.getState().pagination.pageSize +\n              1\n            }}-{{\n              Math.min(\n                Math.max(\n                  table.getState().pagination.pageIndex *\n                    table.getState().pagination.pageSize +\n                    table.getState().pagination.pageSize,\n                  0,\n                ),\n                table.getRowCount(),\n              )\n            }}\n          </span>\n          of\n          <span class=\"text-foreground\">\n            {{ table.getRowCount().toString() }}\n          </span>\n        </p>\n      </div>\n\n      <div>\n        <Pagination\n          :default-page=\"table.getState().pagination.pageIndex + 1\"\n          :items-per-page=\"table.getState().pagination.pageSize\"\n          :total=\"table.getRowCount()\"\n        >\n          <PaginationContent>\n            <PaginationFirst asChild>\n              <Button\n                variant=\"outline\"\n                class=\"size-9\"\n                @click=\"table.firstPage()\"\n                :disabled=\"!table.getCanPreviousPage()\"\n              >\n                <LucideChevronFirst :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationFirst>\n            <PaginationPrevious asChild>\n              <Button\n                variant=\"outline\"\n                class=\"size-9\"\n                @click=\"table.previousPage()\"\n                :disabled=\"!table.getCanPreviousPage()\"\n              >\n                <LucideChevronLeft :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationPrevious>\n            <PaginationNext asChild>\n              <Button\n                variant=\"outline\"\n                class=\"size-9\"\n                @click=\"table.nextPage()\"\n                :disabled=\"!table.getCanNextPage()\"\n              >\n                <LucideChevronRight :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationNext>\n            <PaginationLast asChild>\n              <Button\n                variant=\"outline\"\n                class=\"size-9\"\n                @click=\"table.lastPage()\"\n                :disabled=\"!table.getCanNextPage()\"\n              >\n                <LucideChevronLast :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationLast>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n    <p class=\"text-muted-foreground mt-4 text-center text-sm\">\n      Example of a more complex table made with\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://tanstack.com/table\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TanStack Table\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "checkbox",
      "sort",
      "flag",
      "badge",
      "chip",
      "pagination",
      "filter",
      "select"
    ],
    "colSpan": 3
  },
  "dependencies": [
    "@tanstack/vue-table",
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/alert-dialog.json",
    "https://originui-vue.com/r/badge.json",
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/checkbox.json",
    "https://originui-vue.com/r/dropdown-menu.json",
    "https://originui-vue.com/r/input.json",
    "https://originui-vue.com/r/label.json",
    "https://originui-vue.com/r/pagination.json",
    "https://originui-vue.com/r/popover.json",
    "https://originui-vue.com/r/select.json",
    "https://originui-vue.com/r/table.json"
  ]
}