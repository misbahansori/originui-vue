{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-254",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-254.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Slider } from \"@/registry/default/ui/slider\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\";\nimport { LucideRotateCcw } from \"lucide-vue-next\";\n\nconst minValue = 0;\nconst maxValue = 2;\nconst initialValue = [1.25];\nconst defaultValue = [1];\n\nconst {\n  sliderValues,\n  inputValues,\n  validateAndUpdateValue,\n  handleInputChange,\n  handleSliderChange,\n  resetToDefault,\n  showReset,\n} = useSliderWithInput({ minValue, maxValue, initialValue, defaultValue });\n</script>\n\n<template>\n  <div class=\"space-y-3\">\n    <div class=\"flex items-center justify-between gap-2\">\n      <Label>Temperature</Label>\n      <div class=\"flex items-center gap-1\">\n        <TooltipProvider :delay-duration=\"0\">\n          <Tooltip>\n            <TooltipTrigger as-child>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                :class=\"\n                  cn(\n                    'size-7 transition-opacity',\n                    showReset ? 'opacity-100' : 'opacity-0',\n                  )\n                \"\n                aria-label=\"Reset\"\n                @click=\"resetToDefault\"\n              >\n                <LucideRotateCcw :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent class=\"px-2 py-1 text-xs\">\n              Reset to default\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n        <Input\n          class=\"h-7 w-12 px-2 py-0\"\n          type=\"text\"\n          inputmode=\"decimal\"\n          :model-value=\"inputValues[0]\"\n          @update:model-value=\"(newValue) => handleInputChange(0, newValue)\"\n          @blur=\"() => validateAndUpdateValue(inputValues[0] ?? '', 0)\"\n          @keydown.enter=\"validateAndUpdateValue(inputValues[0] ?? '', 0)\"\n          aria-label=\"Enter value\"\n        />\n      </div>\n    </div>\n    <div class=\"flex items-center gap-4\">\n      <Slider\n        class=\"grow\"\n        :model-value=\"sliderValues\"\n        @update:model-value=\"handleSliderChange\"\n        :min=\"minValue\"\n        :max=\"maxValue\"\n        :step=\"0.01\"\n        aria-label=\"Temperature\"\n      />\n    </div>\n  </div>\n</template>\n",
      "type": "registry:component"
    },
    {
      "path": "app/composables/useSliderWithInput.ts",
      "content": "interface UseSliderWithInputProps {\n  minValue?: number;\n  maxValue?: number;\n  initialValue?: number[];\n  defaultValue?: number[];\n}\n\nexport function useSliderWithInput({\n  minValue = 0,\n  maxValue = 100,\n  initialValue = [minValue],\n  defaultValue = [minValue],\n}: UseSliderWithInputProps) {\n  const sliderValues = ref(initialValue);\n  const inputValues = ref(initialValue.map((v) => v.toString()));\n\n  const showReset = computed(() => {\n    return (\n      sliderValues.value.length === defaultValue.length &&\n      !sliderValues.value.every((value, index) => value === defaultValue[index])\n    );\n  });\n\n  const validateAndUpdateValue = (rawValue: string, index: number) => {\n    if (rawValue === \"\" || rawValue === \"-\") {\n      const newInputValues = [...inputValues.value];\n      newInputValues[index] = \"0\";\n      inputValues.value = newInputValues;\n\n      const newSliderValues = [...sliderValues.value];\n      newSliderValues[index] = 0;\n      sliderValues.value = newSliderValues;\n      return;\n    }\n\n    const numValue = parseFloat(rawValue);\n\n    if (isNaN(numValue)) {\n      const newInputValues = [...inputValues.value];\n      newInputValues[index] = sliderValues.value[index]!.toString();\n      inputValues.value = newInputValues;\n      return;\n    }\n\n    let clampedValue = Math.min(maxValue, Math.max(minValue, numValue));\n\n    if (sliderValues.value.length > 1) {\n      if (index === 0) {\n        clampedValue = Math.min(clampedValue, sliderValues.value[1]!);\n      } else {\n        clampedValue = Math.max(clampedValue, sliderValues.value[0]!);\n      }\n    }\n\n    const newSliderValues = [...sliderValues.value];\n    newSliderValues[index] = clampedValue;\n    sliderValues.value = newSliderValues;\n\n    const newInputValues = [...inputValues.value];\n    newInputValues[index] = clampedValue.toString();\n    inputValues.value = newInputValues;\n  };\n\n  const handleInputChange = (index: number, newValue: string | number) => {\n    if (newValue === \"\" || /^-?\\d*\\.?\\d*$/.test(newValue.toString())) {\n      const newInputValues = [...inputValues.value];\n      newInputValues[index] = newValue.toString();\n      inputValues.value = newInputValues;\n    }\n  };\n\n  const handleSliderChange = (newValue?: number[]) => {\n    if (!newValue) return;\n\n    sliderValues.value = newValue;\n    inputValues.value = newValue.map((v) => v.toString());\n  };\n\n  const resetToDefault = () => {\n    sliderValues.value = [...defaultValue];\n    inputValues.value = defaultValue.map((v) => v.toString());\n  };\n\n  return {\n    sliderValues,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n    showReset,\n  };\n}\n",
      "type": "registry:hook"
    }
  ],
  "meta": {
    "tags": [
      "slider",
      "label",
      "button",
      "input",
      "tooltip",
      "reset",
      "radix"
    ]
  },
  "dependencies": [
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/input.json",
    "https://originui-vue.com/r/label.json",
    "https://originui-vue.com/r/slider.json",
    "https://originui-vue.com/r/tooltip.json"
  ]
}