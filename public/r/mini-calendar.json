{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "mini-calendar",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/mini-calendar/MiniCalendar.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport type { DateValue } from \"@internationalized/date\";\nimport { getLocalTimeZone, today } from \"@internationalized/date\";\nimport { useVModel } from \"@vueuse/core\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, provide, ref, watch } from \"vue\";\n\nexport interface MiniCalendarProps {\n  modelValue?: DateValue;\n  defaultValue?: DateValue;\n  startDate?: DateValue;\n  defaultStartDate?: DateValue;\n  days?: number;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = withDefaults(defineProps<MiniCalendarProps>(), {\n  defaultStartDate: () => today(getLocalTimeZone()),\n  days: 5,\n});\n\nconst emit = defineEmits<{\n  \"update:modelValue\": [date: DateValue | undefined];\n  \"update:startDate\": [date: DateValue | undefined];\n}>();\n\n// Controlled state for selected date\nconst selectedDate = useVModel(props, \"modelValue\", emit, {\n  passive: true,\n  defaultValue: props.defaultValue,\n});\n\n// Controlled state for start date\nconst internalStartDate = ref<DateValue>(props.defaultStartDate);\n\nwatch(\n  () => props.startDate,\n  (newStartDate) => {\n    if (newStartDate) {\n      internalStartDate.value = newStartDate;\n    }\n  },\n  { immediate: true },\n);\n\nconst handleDateSelect = (date: DateValue) => {\n  selectedDate.value = date;\n};\n\nconst handleNavigate = (direction: \"prev\" | \"next\") => {\n  const offset = direction === \"next\" ? props.days : -props.days;\n  const newStartDate = internalStartDate.value.add({ days: offset });\n  internalStartDate.value = newStartDate;\n  emit(\"update:startDate\", newStartDate);\n};\n\n// Provide context to child components\nprovide(\"mini-calendar\", {\n  selectedDate: computed(() => selectedDate.value),\n  onDateSelect: handleDateSelect,\n  startDate: computed(() => internalStartDate.value),\n  onNavigate: handleNavigate,\n  days: computed(() => props.days),\n});\n</script>\n\n<template>\n  <div\n    :class=\"\n      cn(\n        'bg-background flex items-center gap-2 rounded-lg border p-2',\n        props.class,\n      )\n    \"\n  >\n    <slot />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarNavigation.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from \"@/registry/default/ui/button\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-vue-next\";\nimport { Primitive } from \"reka-ui\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, inject } from \"vue\";\n\nexport interface MiniCalendarNavigationProps {\n  direction: \"prev\" | \"next\";\n  asChild?: boolean;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = withDefaults(defineProps<MiniCalendarNavigationProps>(), {\n  asChild: false,\n});\n\nconst context = inject<{\n  onNavigate: (direction: \"prev\" | \"next\") => void;\n}>(\"mini-calendar\");\n\nif (!context) {\n  throw new Error(\n    \"MiniCalendarNavigation must be used within MiniCalendar component\",\n  );\n}\n\nconst Icon = computed(() =>\n  props.direction === \"prev\" ? ChevronLeftIcon : ChevronRightIcon,\n);\n\nconst handleClick = () => {\n  context.onNavigate(props.direction);\n};\n</script>\n\n<template>\n  <Primitive v-if=\"asChild\" as-child @click=\"handleClick\">\n    <slot />\n  </Primitive>\n  <Button\n    v-else\n    size=\"icon\"\n    type=\"button\"\n    variant=\"ghost\"\n    @click=\"handleClick\"\n    :class=\"props.class\"\n  >\n    <slot>\n      <component :is=\"Icon\" class=\"size-4\" />\n    </slot>\n  </Button>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarDays.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport type { DateValue } from \"@internationalized/date\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, inject } from \"vue\";\n\nexport interface MiniCalendarDaysProps {\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = defineProps<MiniCalendarDaysProps>();\n\nconst context = inject<{\n  startDate: ReturnType<typeof computed<DateValue>>;\n  days: ReturnType<typeof computed<number>>;\n}>(\"mini-calendar\");\n\nif (!context) {\n  throw new Error(\n    \"MiniCalendarDays must be used within MiniCalendar component\",\n  );\n}\n\n// Helper function to get array of consecutive dates\nconst getDays = (startDate: DateValue, count: number): DateValue[] => {\n  const days: DateValue[] = [];\n  for (let i = 0; i < count; i++) {\n    days.push(startDate.add({ days: i }));\n  }\n  return days;\n};\n\nconst days = computed(() =>\n  getDays(context.startDate.value, context.days.value),\n);\n</script>\n\n<template>\n  <div :class=\"cn('flex items-center gap-1', props.class)\">\n    <slot v-for=\"date in days\" :key=\"date.toString()\" :date=\"date\" />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarDay.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport type { DateValue } from \"@internationalized/date\";\nimport { getLocalTimeZone, isSameDay, isToday } from \"@internationalized/date\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, inject } from \"vue\";\n\nexport interface MiniCalendarDayProps {\n  date: DateValue;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = defineProps<MiniCalendarDayProps>();\n\nconst context = inject<{\n  selectedDate: ReturnType<typeof computed<DateValue | undefined>>;\n  onDateSelect: (date: DateValue) => void;\n}>(\"mini-calendar\");\n\nif (!context) {\n  throw new Error(\"MiniCalendarDay must be used within MiniCalendar component\");\n}\n\n// Helper function to format date\nconst formatDate = (date: DateValue) => {\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const month = months[date.month - 1];\n  const day = date.day.toString();\n\n  return { month, day };\n};\n\nconst { month, day } = formatDate(props.date);\nconst isSelected = computed(() =>\n  context.selectedDate.value\n    ? isSameDay(props.date, context.selectedDate.value)\n    : false,\n);\nconst isTodayDate = isToday(props.date, getLocalTimeZone());\n\nconst handleClick = () => {\n  context.onDateSelect(props.date);\n};\n</script>\n\n<template>\n  <Button\n    :class=\"\n      cn(\n        'h-auto min-w-[3rem] flex-col gap-0 p-2 text-xs',\n        isTodayDate && !isSelected && 'bg-accent',\n        props.class,\n      )\n    \"\n    @click=\"handleClick\"\n    size=\"sm\"\n    type=\"button\"\n    :variant=\"isSelected ? 'default' : 'ghost'\"\n  >\n    <span\n      :class=\"\n        cn(\n          'text-muted-foreground text-[10px] font-medium',\n          isSelected && 'text-primary-foreground/70',\n        )\n      \"\n    >\n      {{ month }}\n    </span>\n    <span class=\"text-sm font-semibold\">{{ day }}</span>\n  </Button>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/index.ts",
      "content": "export { default as MiniCalendar } from \"./MiniCalendar.vue\";\nexport { default as MiniCalendarNavigation } from \"./MiniCalendarNavigation.vue\";\nexport { default as MiniCalendarDays } from \"./MiniCalendarDays.vue\";\nexport { default as MiniCalendarDay } from \"./MiniCalendarDay.vue\";\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "tags": [
      "mini-calendar",
      "extended",
      "calendar",
      "date"
    ],
    "colSpan": 2
  },
  "dependencies": [
    "@internationalized/date",
    "@vueuse/core",
    "lucide-vue-next",
    "reka-ui"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/button.json"
  ]
}