{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "mini-calendar",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/mini-calendar/MiniCalendar.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { provideMiniCalendarContext } from \"@/registry/default/ui/mini-calendar\";\nimport {\n  getLocalTimeZone,\n  today,\n  type CalendarDate,\n} from \"@internationalized/date\";\nimport type { HTMLAttributes } from \"vue\";\nimport { ref } from \"vue\";\n\nexport interface MiniCalendarProps {\n  startDate?: CalendarDate;\n  days?: number;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = withDefaults(defineProps<MiniCalendarProps>(), {\n  days: 5,\n});\n\nconst selectedDate = defineModel<CalendarDate | undefined>(\"modelValue\");\nconst startDate = ref<CalendarDate>(\n  props.startDate ?? today(getLocalTimeZone()),\n);\n\nconst days = ref<number>(props.days ?? 5);\n\nconst selectDate = (date: CalendarDate) => {\n  selectedDate.value = date;\n};\n\nconst navigate = (offset: number) => {\n  startDate.value = startDate.value?.add({ days: offset });\n};\n\nconst next = () => navigate(days.value);\n\nconst prev = () => navigate(-days.value);\n\nprovideMiniCalendarContext({\n  selectedDate,\n  selectDate,\n  startDate: startDate as Ref<CalendarDate>,\n  navigate,\n  next,\n  prev,\n  days,\n});\n</script>\n\n<template>\n  <div\n    :class=\"\n      cn(\n        'bg-background flex items-center justify-between gap-2 rounded-lg border p-2',\n        props.class,\n      )\n    \"\n  >\n    <slot />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarNavigation.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from \"@/registry/default/ui/button\";\nimport { injectMiniCalendarContext } from \"@/registry/default/ui/mini-calendar\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-vue-next\";\nimport type { PrimitiveProps } from \"reka-ui\";\nimport { Primitive } from \"reka-ui\";\nimport { computed } from \"vue\";\n\nexport interface MiniCalendarNavigationProps extends PrimitiveProps {\n  direction: \"prev\" | \"next\";\n}\n\nconst props = withDefaults(defineProps<MiniCalendarNavigationProps>(), {\n  as: Button,\n});\n\nconst context = injectMiniCalendarContext();\n\nconst Icon = computed(() =>\n  props.direction === \"prev\" ? ChevronLeftIcon : ChevronRightIcon,\n);\n</script>\n\n<template>\n  <Primitive\n    :as=\"as\"\n    :as-child=\"asChild\"\n    type=\"button\"\n    size=\"icon\"\n    variant=\"ghost\"\n    @click=\"props.direction === 'prev' ? context.prev() : context.next()\"\n  >\n    <slot>\n      <component :is=\"Icon\" class=\"size-4\" />\n    </slot>\n  </Primitive>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarDays.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { injectMiniCalendarContext } from \"@/registry/default/ui/mini-calendar\";\nimport type { CalendarDate } from \"@internationalized/date\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed } from \"vue\";\n\nexport interface MiniCalendarDaysProps {\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = defineProps<MiniCalendarDaysProps>();\n\nconst context = injectMiniCalendarContext();\n\nconst days = computed(() => {\n  const days: CalendarDate[] = [];\n  for (let i = 0; i < context.days.value; i++) {\n    days.push(context.startDate.value.add({ days: i }));\n  }\n  return days;\n});\n</script>\n\n<template>\n  <div :class=\"cn('flex items-center gap-1', props.class)\">\n    <slot v-for=\"date in days\" :key=\"date.toString()\" :date=\"date\" />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarDay.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { injectMiniCalendarContext } from \"@/registry/default/ui/mini-calendar\";\nimport type { CalendarDate } from \"@internationalized/date\";\nimport { getLocalTimeZone, isSameDay, isToday } from \"@internationalized/date\";\nimport { useDateFormat } from \"@vueuse/core\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed } from \"vue\";\n\nexport interface MiniCalendarDayProps {\n  date: CalendarDate;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = defineProps<MiniCalendarDayProps>();\n\nconst context = injectMiniCalendarContext();\n\nconst nativeDate = computed(() => props.date.toDate(getLocalTimeZone()));\n\nconst month = useDateFormat(nativeDate, \"MMM\");\nconst day = useDateFormat(nativeDate, \"DD\");\n\nconst isSelected = computed(() =>\n  context.selectedDate.value\n    ? isSameDay(props.date, context.selectedDate.value)\n    : false,\n);\nconst isTodayDate = isToday(props.date, getLocalTimeZone());\n</script>\n\n<template>\n  <Button\n    :class=\"\n      cn(\n        'h-auto min-w-[3rem] flex-col gap-0 p-2 text-xs',\n        isTodayDate && !isSelected && 'bg-accent',\n        props.class,\n      )\n    \"\n    @click=\"context.selectDate(props.date)\"\n    size=\"sm\"\n    type=\"button\"\n    :variant=\"isSelected ? 'default' : 'ghost'\"\n  >\n    <span\n      :class=\"\n        cn(\n          'text-muted-foreground text-[10px] font-medium',\n          isSelected && 'text-primary-foreground/70',\n        )\n      \"\n    >\n      {{ month }}\n    </span>\n    <span class=\"text-sm font-semibold\">{{ day }}</span>\n  </Button>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/index.ts",
      "content": "import type { CalendarDate } from \"@internationalized/date\";\nimport { createContext } from \"reka-ui\";\nimport type { Ref } from \"vue\";\n\nexport interface MiniCalendarContext {\n  startDate: Ref<CalendarDate>;\n  selectedDate: Ref<CalendarDate | undefined>;\n  days: Ref<number>;\n  selectDate: (date: CalendarDate) => void;\n  navigate: (offset: number) => void;\n  next: () => void;\n  prev: () => void;\n}\n\nexport const [injectMiniCalendarContext, provideMiniCalendarContext] =\n  createContext<MiniCalendarContext>(\"MiniCalendar\");\n\nexport { default as MiniCalendar } from \"./MiniCalendar.vue\";\nexport { default as MiniCalendarNavigation } from \"./MiniCalendarNavigation.vue\";\nexport { default as MiniCalendarDays } from \"./MiniCalendarDays.vue\";\nexport { default as MiniCalendarDay } from \"./MiniCalendarDay.vue\";\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "tags": [
      "mini-calendar",
      "extended",
      "calendar",
      "date"
    ],
    "colSpan": 2
  },
  "dependencies": [
    "@internationalized/date",
    "lucide-vue-next",
    "reka-ui",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/mini-calendar.json",
    "https://originui-vue.com/r/button.json"
  ]
}