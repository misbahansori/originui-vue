{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "mini-calendar",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/mini-calendar/MiniCalendar.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { useVModel } from \"@vueuse/core\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, provide, ref, watch } from \"vue\";\n\nexport interface MiniCalendarProps {\n  modelValue?: Date;\n  defaultValue?: Date;\n  startDate?: Date;\n  defaultStartDate?: Date;\n  days?: number;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = withDefaults(defineProps<MiniCalendarProps>(), {\n  defaultStartDate: () => new Date(),\n  days: 5,\n});\n\nconst emit = defineEmits<{\n  \"update:modelValue\": [date: Date | undefined];\n  \"update:startDate\": [date: Date | undefined];\n}>();\n\n// Helper function to add days to a date\nconst addDays = (date: Date, days: number): Date => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\n// Controlled state for selected date\nconst selectedDate = useVModel(props, \"modelValue\", emit, {\n  passive: true,\n  defaultValue: props.defaultValue,\n});\n\n// Controlled state for start date\nconst internalStartDate = ref<Date>(props.defaultStartDate);\n\nwatch(\n  () => props.startDate,\n  (newStartDate) => {\n    if (newStartDate) {\n      internalStartDate.value = newStartDate;\n    }\n  },\n  { immediate: true },\n);\n\nconst handleDateSelect = (date: Date) => {\n  selectedDate.value = date;\n};\n\nconst handleNavigate = (direction: \"prev\" | \"next\") => {\n  const newStartDate = addDays(\n    internalStartDate.value,\n    direction === \"next\" ? props.days : -props.days,\n  );\n  internalStartDate.value = newStartDate;\n  emit(\"update:startDate\", newStartDate);\n};\n\n// Provide context to child components\nprovide(\"mini-calendar\", {\n  selectedDate: computed(() => selectedDate.value),\n  onDateSelect: handleDateSelect,\n  startDate: computed(() => internalStartDate.value),\n  onNavigate: handleNavigate,\n  days: computed(() => props.days),\n});\n</script>\n\n<template>\n  <div\n    :class=\"\n      cn(\n        'flex items-center gap-2 rounded-lg border bg-background p-2',\n        props.class,\n      )\n    \"\n  >\n    <slot />\n  </div>\n</template>\n\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarNavigation.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Primitive } from \"reka-ui\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, inject } from \"vue\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-vue-next\";\n\nexport interface MiniCalendarNavigationProps {\n  direction: \"prev\" | \"next\";\n  asChild?: boolean;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = withDefaults(defineProps<MiniCalendarNavigationProps>(), {\n  asChild: false,\n});\n\nconst context = inject<{\n  onNavigate: (direction: \"prev\" | \"next\") => void;\n}>(\"mini-calendar\");\n\nif (!context) {\n  throw new Error(\n    \"MiniCalendarNavigation must be used within MiniCalendar component\",\n  );\n}\n\nconst Icon = computed(() =>\n  props.direction === \"prev\" ? ChevronLeftIcon : ChevronRightIcon,\n);\n\nconst handleClick = () => {\n  context.onNavigate(props.direction);\n};\n</script>\n\n<template>\n  <Primitive v-if=\"asChild\" as-child @click=\"handleClick\">\n    <slot />\n  </Primitive>\n  <Button\n    v-else\n    size=\"icon\"\n    type=\"button\"\n    variant=\"ghost\"\n    @click=\"handleClick\"\n    :class=\"props.class\"\n  >\n    <slot>\n      <component :is=\"Icon\" class=\"size-4\" />\n    </slot>\n  </Button>\n</template>\n\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarDays.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, inject } from \"vue\";\n\nexport interface MiniCalendarDaysProps {\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = defineProps<MiniCalendarDaysProps>();\n\nconst context = inject<{\n  startDate: ReturnType<typeof computed<Date>>;\n  days: ReturnType<typeof computed<number>>;\n}>(\"mini-calendar\");\n\nif (!context) {\n  throw new Error(\"MiniCalendarDays must be used within MiniCalendar component\");\n}\n\n// Helper function to add days to a date\nconst addDays = (date: Date, days: number): Date => {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n};\n\n// Helper function to get array of consecutive dates\nconst getDays = (startDate: Date, count: number): Date[] => {\n  const days: Date[] = [];\n  for (let i = 0; i < count; i++) {\n    days.push(addDays(startDate, i));\n  }\n  return days;\n};\n\nconst days = computed(() => getDays(context.startDate.value, context.days.value));\n</script>\n\n<template>\n  <div :class=\"cn('flex items-center gap-1', props.class)\">\n    <slot v-for=\"date in days\" :key=\"date.getTime()\" :date=\"date\" />\n  </div>\n</template>\n\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/MiniCalendarDay.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport type { HTMLAttributes } from \"vue\";\nimport { computed, inject } from \"vue\";\n\nexport interface MiniCalendarDayProps {\n  date: Date;\n  class?: HTMLAttributes[\"class\"];\n}\n\nconst props = defineProps<MiniCalendarDayProps>();\n\nconst context = inject<{\n  selectedDate: ReturnType<typeof computed<Date | undefined>>;\n  onDateSelect: (date: Date) => void;\n}>(\"mini-calendar\");\n\nif (!context) {\n  throw new Error(\"MiniCalendarDay must be used within MiniCalendar component\");\n}\n\n// Helper function to check if two dates are the same day\nconst isSameDay = (date1: Date, date2: Date): boolean => {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n};\n\n// Helper function to check if date is today\nconst isToday = (date: Date): boolean => {\n  return isSameDay(date, new Date());\n};\n\n// Helper function to format date\nconst formatDate = (date: Date) => {\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = months[date.getMonth()];\n  const day = date.getDate().toString();\n\n  return { month, day };\n};\n\nconst { month, day } = formatDate(props.date);\nconst isSelected = computed(() =>\n  context.selectedDate.value ? isSameDay(props.date, context.selectedDate.value) : false,\n);\nconst isTodayDate = isToday(props.date);\n\nconst handleClick = () => {\n  context.onDateSelect(props.date);\n};\n</script>\n\n<template>\n  <Button\n    :class=\"\n      cn(\n        'h-auto min-w-[3rem] flex-col gap-0 p-2 text-xs',\n        isTodayDate && !isSelected && 'bg-accent',\n        props.class,\n      )\n    \"\n    @click=\"handleClick\"\n    size=\"sm\"\n    type=\"button\"\n    :variant=\"isSelected ? 'default' : 'ghost'\"\n  >\n    <span\n      :class=\"\n        cn(\n          'font-medium text-[10px] text-muted-foreground',\n          isSelected && 'text-primary-foreground/70',\n        )\n      \"\n    >\n      {{ month }}\n    </span>\n    <span class=\"font-semibold text-sm\">{{ day }}</span>\n  </Button>\n</template>\n\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/mini-calendar/index.ts",
      "content": "export { default as MiniCalendar } from \"./MiniCalendar.vue\";\nexport { default as MiniCalendarNavigation } from \"./MiniCalendarNavigation.vue\";\nexport { default as MiniCalendarDays } from \"./MiniCalendarDays.vue\";\nexport { default as MiniCalendarDay } from \"./MiniCalendarDay.vue\";\n\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "tags": [
      "mini-calendar",
      "extended",
      "calendar",
      "date"
    ],
    "colSpan": 2
  },
  "dependencies": [
    "@vueuse/core",
    "reka-ui",
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/button.json"
  ]
}