{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-484",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-484.vue",
      "content": "<script setup lang=\"ts\">\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n} from \"@/registry/default/ui/pagination\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useVueTable,\n  type ColumnDef,\n  type PaginationState,\n  type RowSelectionState,\n  type SortingState,\n} from \"@tanstack/vue-table\";\nimport {\n  ChevronDownIcon,\n  ChevronFirstIcon,\n  ChevronLastIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronUpIcon,\n} from \"lucide-vue-next\";\nimport { h, onMounted, ref } from \"vue\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n};\n\nconst pageSize = 5;\n\nconst data = ref<Item[]>([]);\nconst rowSelection = ref<RowSelectionState>({});\nconst pagination = ref<PaginationState>({\n  pageIndex: 0,\n  pageSize: pageSize,\n});\nconst sorting = ref<SortingState>([\n  {\n    id: \"name\",\n    desc: false,\n  },\n]);\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) =>\n      h(Checkbox, {\n        modelValue:\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\"),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          table.toggleAllPageRowsSelected(!!value),\n        \"aria-label\": \"Select all rows\",\n      }),\n    cell: ({ row }) =>\n      h(Checkbox, {\n        modelValue: row.getIsSelected(),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          row.toggleSelected(!!value),\n        \"aria-label\": \"Select row\",\n      }),\n    size: 28,\n    enableSorting: false,\n  },\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) => h(\"div\", { class: \"font-medium\" }, row.getValue(\"name\")),\n    size: 180,\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n    size: 200,\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) =>\n      h(\"div\", {}, [\n        h(\n          \"span\",\n          { class: \"text-lg leading-none\" },\n          row.original.flag as string,\n        ),\n        \" \",\n        row.getValue(\"location\") as string,\n      ]),\n    size: 180,\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n    cell: ({ row }) =>\n      h(\n        Badge,\n        {\n          class:\n            row.getValue(\"status\") === \"Inactive\"\n              ? \"bg-muted-foreground/60 text-primary-foreground\"\n              : \"\",\n        },\n        () => row.getValue(\"status\"),\n      ),\n    size: 120,\n  },\n  {\n    header: \"Balance\",\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return formatted;\n    },\n    size: 120,\n  },\n];\n\nonMounted(async () => {\n  try {\n    const res = await $fetch(\"/api/users\");\n    data.value = res;\n  } catch (error) {\n    console.error(\"Failed to fetch data:\", error);\n  }\n});\n\nconst table = useVueTable({\n  get data() {\n    return data.value;\n  },\n  get columns() {\n    return columns;\n  },\n  getCoreRowModel: getCoreRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  state: {\n    get rowSelection() {\n      return rowSelection.value;\n    },\n    get pagination() {\n      return pagination.value;\n    },\n    get sorting() {\n      return sorting.value;\n    },\n  },\n  onSortingChange: (updater) => {\n    sorting.value =\n      typeof updater === \"function\" ? updater(sorting.value) : updater;\n  },\n  onPaginationChange: (updater) => {\n    pagination.value =\n      typeof updater === \"function\" ? updater(pagination.value) : updater;\n  },\n  onRowSelectionChange: (updater) => {\n    rowSelection.value =\n      typeof updater === \"function\" ? updater(rowSelection.value) : updater;\n  },\n  enableSortingRemoval: false,\n});\n</script>\n\n<template>\n  <div class=\"space-y-4\">\n    <div class=\"bg-background overflow-hidden rounded-md border\">\n      <Table class=\"table-fixed\">\n        <TableHeader>\n          <TableRow\n            v-for=\"headerGroup in table.getHeaderGroups()\"\n            :key=\"headerGroup.id\"\n            class=\"hover:bg-transparent\"\n          >\n            <TableHead\n              v-for=\"header in headerGroup.headers\"\n              :key=\"header.id\"\n              :style=\"{ width: `${header.getSize()}px` }\"\n              class=\"h-11\"\n            >\n              <template v-if=\"!header.isPlaceholder\">\n                <div\n                  v-if=\"header.column.getCanSort()\"\n                  class=\"flex h-full cursor-pointer items-center justify-between gap-2 select-none\"\n                  @click=\"header.column.getToggleSortingHandler()\"\n                  @keydown=\"\n                    (e) => {\n                      if (\n                        header.column.getCanSort() &&\n                        (e.key === 'Enter' || e.key === ' ')\n                      ) {\n                        e.preventDefault();\n                        header.column.getToggleSortingHandler()?.(e);\n                      }\n                    }\n                  \"\n                  tabindex=\"0\"\n                >\n                  <FlexRender\n                    :render=\"header.column.columnDef.header\"\n                    :props=\"header.getContext()\"\n                  />\n                  <ChevronUpIcon\n                    v-if=\"header.column.getIsSorted() === 'asc'\"\n                    class=\"shrink-0 opacity-60\"\n                    :size=\"16\"\n                    aria-hidden=\"true\"\n                  />\n                  <ChevronDownIcon\n                    v-else-if=\"header.column.getIsSorted() === 'desc'\"\n                    class=\"shrink-0 opacity-60\"\n                    :size=\"16\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <FlexRender\n                  v-else\n                  :render=\"header.column.columnDef.header\"\n                  :props=\"header.getContext()\"\n                />\n              </template>\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <template v-if=\"table.getRowModel().rows?.length\">\n            <TableRow\n              v-for=\"row in table.getRowModel().rows\"\n              :key=\"row.id\"\n              :data-state=\"row.getIsSelected() && 'selected'\"\n            >\n              <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                <FlexRender\n                  :render=\"cell.column.columnDef.cell\"\n                  :props=\"cell.getContext()\"\n                />\n              </TableCell>\n            </TableRow>\n          </template>\n          <TableRow v-else>\n            <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n              No results.\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n\n    <!-- Pagination -->\n    <div class=\"flex items-center justify-between gap-8\">\n      <!-- Results per page -->\n      <div class=\"flex items-center gap-3\">\n        <Label class=\"max-sm:sr-only\">Rows per page</Label>\n        <Select\n          :model-value=\"table.getState().pagination.pageSize.toString()\"\n          @update:model-value=\"(value) => table.setPageSize(Number(value))\"\n        >\n          <SelectTrigger class=\"w-fit whitespace-nowrap\">\n            <SelectValue placeholder=\"Select number of results\" />\n          </SelectTrigger>\n          <SelectContent\n            class=\"[&_*[role=option]]:ps-2 [&_*[role=option]]:pe-8 [&_*[role=option]>span]:start-auto [&_*[role=option]>span]:end-2\"\n          >\n            <SelectItem\n              v-for=\"pageSize in [5, 10, 25, 50]\"\n              :key=\"pageSize\"\n              :value=\"pageSize.toString()\"\n            >\n              {{ pageSize }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <!-- Page number information -->\n      <div\n        class=\"text-muted-foreground flex grow justify-end text-sm whitespace-nowrap\"\n      >\n        <p\n          class=\"text-muted-foreground text-sm whitespace-nowrap\"\n          aria-live=\"polite\"\n        >\n          <span class=\"text-foreground\">\n            {{\n              table.getState().pagination.pageIndex *\n                table.getState().pagination.pageSize +\n              1\n            }}-{{\n              Math.min(\n                Math.max(\n                  table.getState().pagination.pageIndex *\n                    table.getState().pagination.pageSize +\n                    table.getState().pagination.pageSize,\n                  0,\n                ),\n                table.getRowCount(),\n              )\n            }}\n          </span>\n          of\n          <span class=\"text-foreground\">\n            {{ table.getRowCount().toString() }}\n          </span>\n        </p>\n      </div>\n      <!-- Pagination buttons -->\n      <div>\n        <Pagination\n          :items-per-page=\"table.getState().pagination.pageSize\"\n          :total=\"table.getRowCount()\"\n        >\n          <PaginationContent>\n            <!-- First page button -->\n            <PaginationItem :value=\"1\">\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                class=\"disabled:pointer-events-none disabled:opacity-50\"\n                @click=\"table.firstPage()\"\n                :disabled=\"!table.getCanPreviousPage()\"\n                aria-label=\"Go to first page\"\n              >\n                <ChevronFirstIcon :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationItem>\n            <!-- Previous page button -->\n            <PaginationItem :value=\"table.getState().pagination.pageIndex - 1\">\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                class=\"disabled:pointer-events-none disabled:opacity-50\"\n                @click=\"table.previousPage()\"\n                :disabled=\"!table.getCanPreviousPage()\"\n                aria-label=\"Go to previous page\"\n              >\n                <ChevronLeftIcon :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationItem>\n            <!-- Next page button -->\n            <PaginationItem :value=\"table.getState().pagination.pageIndex + 1\">\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                class=\"disabled:pointer-events-none disabled:opacity-50\"\n                @click=\"table.nextPage()\"\n                :disabled=\"!table.getCanNextPage()\"\n                aria-label=\"Go to next page\"\n              >\n                <ChevronRightIcon :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationItem>\n            <!-- Last page button -->\n            <PaginationItem\n              :value=\"table.getPageCount() - 1\"\n              :disabled=\"!table.getCanNextPage()\"\n            >\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                class=\"disabled:pointer-events-none disabled:opacity-50\"\n                @click=\"table.lastPage()\"\n                :disabled=\"!table.getCanNextPage()\"\n                aria-label=\"Go to last page\"\n              >\n                <ChevronLastIcon :size=\"16\" aria-hidden=\"true\" />\n              </Button>\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n    <p class=\"text-muted-foreground mt-4 text-center text-sm\">\n      Paginated table made with\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://tanstack.com/table\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TanStack Table\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "checkbox",
      "sort",
      "flag",
      "badge",
      "chip",
      "pagination"
    ],
    "colSpan": 3
  },
  "dependencies": [
    "@tanstack",
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/badge.json",
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/checkbox.json",
    "https://originui-vue.com/r/label.json",
    "https://originui-vue.com/r/pagination.json",
    "https://originui-vue.com/r/select.json",
    "https://originui-vue.com/r/table.json"
  ]
}