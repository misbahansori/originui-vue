{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-477",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-477.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  FlexRender,\n  getCoreRowModel,\n  useVueTable,\n  type ColumnDef,\n} from \"@tanstack/vue-table\";\nimport { h, onMounted, shallowRef } from \"vue\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n};\n\nconst data = shallowRef<Item[]>([]);\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) =>\n      h(Checkbox, {\n        modelValue:\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\"),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          table.toggleAllPageRowsSelected(!!value),\n        \"aria-label\": \"Select all\",\n      }),\n    cell: ({ row }) =>\n      h(Checkbox, {\n        modelValue: row.getIsSelected(),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          row.toggleSelected(!!value),\n        \"aria-label\": \"Select row\",\n      }),\n  },\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) => h(\"div\", { class: \"font-medium\" }, row.getValue(\"name\")),\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) =>\n      h(\"div\", {}, [\n        h(\n          \"span\",\n          { class: \"text-lg leading-none\" },\n          row.original.flag as string,\n        ),\n        \" \",\n        row.getValue(\"location\") as string,\n      ]),\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n    cell: ({ row }) =>\n      h(\n        Badge,\n        {\n          class: cn(\n            row.getValue(\"status\") === \"Inactive\" &&\n              \"bg-muted-foreground/60 text- primary-foreground\",\n          ),\n        },\n        row.getValue(\"status\"),\n      ),\n  },\n  {\n    header: () => h(\"div\", { class: \"text-right\" }, \"Balance\"),\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return h(\"div\", { class: \"text-right\" }, formatted);\n    },\n  },\n];\n\nonMounted(async () => {\n  const res = await $fetch(\"/api/users\");\n\n  data.value = res.slice(0, 5);\n});\n\nconst table = useVueTable({\n  get data() {\n    return data.value;\n  },\n  get columns() {\n    return columns;\n  },\n  getCoreRowModel: getCoreRowModel(),\n});\n</script>\n\n<template>\n  <div>\n    <Table>\n      <TableHeader>\n        <TableRow\n          v-for=\"headerGroup in table.getHeaderGroups()\"\n          :key=\"headerGroup.id\"\n          class=\"hover:bg-transparent\"\n        >\n          <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n            <FlexRender\n              :render=\"header.column.columnDef.header\"\n              :props=\"header.getContext()\"\n            />\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <template v-if=\"table.getRowModel().rows?.length\">\n          <TableRow\n            v-for=\"row in table.getRowModel().rows\"\n            :key=\"row.id\"\n            :data-state=\"row.getIsSelected() && 'selected'\"\n          >\n            <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n              <FlexRender\n                :render=\"cell.column.columnDef.cell\"\n                :props=\"cell.getContext()\"\n              />\n            </TableCell>\n          </TableRow>\n        </template>\n        <template v-else>\n          <TableRow>\n            <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n              No results.\n            </TableCell>\n          </TableRow>\n        </template>\n      </TableBody>\n      <TableFooter class=\"bg-transparent\">\n        <TableRow class=\"hover:bg-transparent\">\n          <TableCell :colspan=\"5\">Total</TableCell>\n          <TableCell class=\"text-right\">\n            {{\n              new Intl.NumberFormat(\"en-US\", {\n                style: \"currency\",\n                currency: \"USD\",\n              }).format(data.reduce((total, item) => total + item.balance, 0))\n            }}\n          </TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n    <p class=\"text-muted-foreground mt-4 text-center text-sm\">\n      Basic data table made with\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://tanstack.com/table\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TanStack Table\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "checkbox",
      "badge",
      "chip",
      "flag"
    ],
    "colSpan": 3
  },
  "dependencies": [
    "@tanstack/vue-table"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/badge.json",
    "https://originui-vue.com/r/checkbox.json",
    "https://originui-vue.com/r/table.json"
  ]
}