{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-482",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-482.vue",
      "content": "<script setup lang=\"ts\">\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useVueTable,\n  type ColumnDef,\n  type ExpandedState,\n  type RowSelectionState,\n} from \"@tanstack/vue-table\";\nimport { ChevronDownIcon, ChevronUpIcon, InfoIcon } from \"lucide-vue-next\";\nimport { h, onMounted, ref } from \"vue\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n  note?: string;\n};\n\nconst data = ref<Item[]>([]);\nconst rowSelection = ref<RowSelectionState>({});\nconst expanded = ref<ExpandedState>({});\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    id: \"expander\",\n    header: () => null,\n    cell: ({ row }) => {\n      return row.getCanExpand()\n        ? h(\n            Button,\n            {\n              class: \"size-7 shadow-none text-muted-foreground\",\n              onClick: () => row.toggleExpanded(),\n              \"aria-expanded\": row.getIsExpanded(),\n              \"aria-label\": row.getIsExpanded()\n                ? `Collapse details for ${row.original.name}`\n                : `Expand details for ${row.original.name}`,\n              size: \"icon\",\n              variant: \"ghost\",\n            },\n            () => [\n              row.getIsExpanded()\n                ? h(ChevronUpIcon, {\n                    class: \"opacity-60\",\n                    size: 16,\n                    \"aria-hidden\": \"true\",\n                  })\n                : h(ChevronDownIcon, {\n                    class: \"opacity-60\",\n                    size: 16,\n                    \"aria-hidden\": \"true\",\n                  }),\n            ],\n          )\n        : undefined;\n    },\n  },\n  {\n    id: \"select\",\n    header: ({ table }) =>\n      h(Checkbox, {\n        modelValue:\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\"),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          table.toggleAllPageRowsSelected(!!value),\n        \"aria-label\": \"Select all\",\n      }),\n    cell: ({ row }) =>\n      h(Checkbox, {\n        modelValue: row.getIsSelected(),\n        \"onUpdate:modelValue\": (value: boolean | \"indeterminate\") =>\n          row.toggleSelected(!!value),\n        \"aria-label\": \"Select row\",\n      }),\n  },\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) => h(\"div\", { class: \"font-medium\" }, row.getValue(\"name\")),\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) =>\n      h(\"div\", {}, [\n        h(\n          \"span\",\n          { class: \"text-lg leading-none\" },\n          row.original.flag as string,\n        ),\n        \" \",\n        row.getValue(\"location\") as string,\n      ]),\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n    cell: ({ row }) =>\n      h(\n        Badge,\n        {\n          class:\n            row.getValue(\"status\") === \"Inactive\"\n              ? \"bg-muted-foreground/60 text-primary-foreground\"\n              : \"\",\n        },\n        () => row.getValue(\"status\"),\n      ),\n  },\n  {\n    header: () => h(\"div\", { class: \"text-right\" }, \"Balance\"),\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return h(\"div\", { class: \"text-right\" }, formatted);\n    },\n  },\n];\n\nonMounted(async () => {\n  try {\n    const res = await $fetch(\"/api/users\");\n    data.value = res.slice(0, 5);\n  } catch (error) {\n    console.error(\"Failed to fetch data:\", error);\n  }\n});\n\nconst table = useVueTable({\n  get data() {\n    return data.value;\n  },\n  columns,\n  getRowCanExpand: (row) => Boolean(row.original.note),\n  getCoreRowModel: getCoreRowModel(),\n  getExpandedRowModel: getExpandedRowModel(),\n  state: {\n    get rowSelection() {\n      return rowSelection.value;\n    },\n    get expanded() {\n      return expanded.value;\n    },\n  },\n  onRowSelectionChange: (updaterOrValue) => {\n    rowSelection.value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(rowSelection.value)\n        : updaterOrValue;\n  },\n  onExpandedChange: (updaterOrValue) => {\n    expanded.value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(expanded.value)\n        : updaterOrValue;\n  },\n});\n</script>\n\n<template>\n  <div>\n    <Table>\n      <TableHeader>\n        <TableRow\n          v-for=\"headerGroup in table.getHeaderGroups()\"\n          :key=\"headerGroup.id\"\n          class=\"hover:bg-transparent\"\n        >\n          <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n            <FlexRender\n              v-if=\"!header.isPlaceholder\"\n              :render=\"header.column.columnDef.header\"\n              :props=\"header.getContext()\"\n            />\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <template v-if=\"table.getRowModel().rows?.length\">\n          <template v-for=\"row in table.getRowModel().rows\" :key=\"row.id\">\n            <TableRow :data-state=\"row.getIsSelected() && 'selected'\">\n              <TableCell\n                v-for=\"cell in row.getVisibleCells()\"\n                :key=\"cell.id\"\n                class=\"whitespace-nowrap [&:has([aria-expanded])]:w-px [&:has([aria-expanded])]:py-0 [&:has([aria-expanded])]:pr-0\"\n              >\n                <FlexRender\n                  :render=\"cell.column.columnDef.cell\"\n                  :props=\"cell.getContext()\"\n                />\n              </TableCell>\n            </TableRow>\n            <TableRow v-if=\"row.getIsExpanded()\">\n              <TableCell :colspan=\"row.getVisibleCells().length\">\n                <div class=\"text-primary/80 flex items-start py-2\">\n                  <span\n                    class=\"me-3 mt-0.5 flex w-7 shrink-0 justify-center\"\n                    aria-hidden=\"true\"\n                  >\n                    <InfoIcon class=\"opacity-60\" :size=\"16\" />\n                  </span>\n                  <p class=\"text-sm whitespace-pre-wrap\">\n                    {{ row.original.note }}\n                  </p>\n                </div>\n              </TableCell>\n            </TableRow>\n          </template>\n        </template>\n        <TableRow v-else>\n          <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n            No results.\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n    <p class=\"text-muted-foreground mt-4 text-center text-sm\">\n      Expanding sub-row made with\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://tanstack.com/table\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TanStack Table\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "checkbox",
      "collapsible",
      "flag",
      "badge",
      "chip"
    ],
    "colSpan": 3
  },
  "dependencies": [
    "@tanstack",
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/badge.json",
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/checkbox.json",
    "https://originui-vue.com/r/table.json"
  ]
}