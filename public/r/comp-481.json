{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-481",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-481.vue",
      "content": "<script setup lang=\"ts\">\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useVueTable,\n  type ColumnDef,\n  type SortingState,\n} from \"@tanstack/vue-table\";\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  GripVerticalIcon,\n} from \"lucide-vue-next\";\nimport { h, onMounted, ref } from \"vue\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n};\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) =>\n      h(\"div\", { class: \"truncate font-medium\" }, row.getValue(\"name\")),\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) =>\n      h(\"div\", { class: \"truncate\" }, [\n        h(\n          \"span\",\n          { class: \"text-lg leading-none\" },\n          row.original.flag as string,\n        ),\n        \" \",\n        row.getValue(\"location\") as string,\n      ]),\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n  },\n  {\n    header: \"Balance\",\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n    },\n  },\n];\n\nconst data = ref<Item[]>([]);\nconst sorting = ref<SortingState>([]);\n\nonMounted(async () => {\n  try {\n    const res = await $fetch(\"/api/users\");\n    data.value = res.slice(0, 5);\n  } catch (error) {\n    console.error(\"Failed to fetch data:\", error);\n  }\n});\n\nconst table = useVueTable({\n  get data() {\n    return data.value;\n  },\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  state: {\n    get sorting() {\n      return sorting.value;\n    },\n  },\n  onSortingChange: (updaterOrValue) => {\n    sorting.value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(sorting.value)\n        : updaterOrValue;\n  },\n  enableSortingRemoval: false,\n});\n</script>\n\n<template>\n  <div>\n    <Table>\n      <TableHeader>\n        <TableRow\n          v-for=\"headerGroup in table.getHeaderGroups()\"\n          :key=\"headerGroup.id\"\n          class=\"bg-muted/50\"\n        >\n          <TableHead\n            v-for=\"header in headerGroup.headers\"\n            :key=\"header.id\"\n            class=\"before:bg-border relative h-10 border-t before:absolute before:inset-y-0 before:start-0 before:w-px first:before:bg-transparent\"\n            :aria-sort=\"\n              header.column.getIsSorted() === 'asc'\n                ? 'ascending'\n                : header.column.getIsSorted() === 'desc'\n                  ? 'descending'\n                  : 'none'\n            \"\n          >\n            <div class=\"flex items-center justify-start gap-0.5\">\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                class=\"-ml-2 size-7 shadow-none\"\n                aria-label=\"Drag to reorder\"\n              >\n                <GripVerticalIcon\n                  class=\"opacity-60\"\n                  :size=\"16\"\n                  aria-hidden=\"true\"\n                />\n              </Button>\n              <span class=\"grow truncate\" v-if=\"!header.isPlaceholder\">\n                <FlexRender\n                  :render=\"header.column.columnDef.header\"\n                  :props=\"header.getContext()\"\n                />\n              </span>\n              <Button\n                v-if=\"header.column.getCanSort()\"\n                size=\"icon\"\n                variant=\"ghost\"\n                class=\"group -mr-1 size-7 shadow-none\"\n                @click=\"header.column.getToggleSortingHandler()?.($event)\"\n                @keydown=\"\n                  (e: KeyboardEvent) => {\n                    if (\n                      header.column.getCanSort() &&\n                      (e.key === 'Enter' || e.key === ' ')\n                    ) {\n                      e.preventDefault();\n                      header.column.getToggleSortingHandler()?.(e);\n                    }\n                  }\n                \"\n              >\n                <ChevronUpIcon\n                  v-if=\"header.column.getIsSorted() === 'asc'\"\n                  class=\"shrink-0 opacity-60\"\n                  :size=\"16\"\n                  aria-hidden=\"true\"\n                />\n                <ChevronDownIcon\n                  v-else-if=\"header.column.getIsSorted() === 'desc'\"\n                  class=\"shrink-0 opacity-60\"\n                  :size=\"16\"\n                  aria-hidden=\"true\"\n                />\n                <ChevronUpIcon\n                  v-else\n                  class=\"shrink-0 opacity-0 group-hover:opacity-60\"\n                  :size=\"16\"\n                  aria-hidden=\"true\"\n                />\n              </Button>\n            </div>\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <template v-if=\"table.getRowModel().rows?.length\">\n          <TableRow\n            v-for=\"row in table.getRowModel().rows\"\n            :key=\"row.id\"\n            :data-state=\"row.getIsSelected() && 'selected'\"\n          >\n            <TableCell\n              v-for=\"cell in row.getVisibleCells()\"\n              :key=\"cell.id\"\n              class=\"truncate\"\n            >\n              <FlexRender\n                :render=\"cell.column.columnDef.cell\"\n                :props=\"cell.getContext()\"\n              />\n            </TableCell>\n          </TableRow>\n        </template>\n        <TableRow v-else>\n          <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n            No results.\n          </TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n    <p class=\"text-muted-foreground mt-4 text-center text-sm\">\n      (work in progress) Draggable columns made with\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://tanstack.com/table\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TanStack Table\n      </a>\n      and\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://dndkit.com/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        dnd kit\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "flag",
      "sort",
      "drag and drop"
    ],
    "colSpan": 3
  },
  "dependencies": [
    "@tanstack",
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/table.json"
  ]
}