{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/multi-select/MultiSelect.vue",
      "content": "<script setup lang=\"ts\">\nimport {\n  ComboboxAnchor,\n  ComboboxGroup,\n  ComboboxItem,\n  ComboboxItemIndicator,\n} from \"@/registry/default/ui/combobox\";\nimport { LucideCheck, LucideX } from \"lucide-vue-next\";\nimport {\n  ComboboxInput,\n  ComboboxRoot,\n  TagsInputInput,\n  TagsInputItem,\n  TagsInputItemDelete,\n  TagsInputItemText,\n  TagsInputRoot,\n  useFilter,\n} from \"reka-ui\";\nimport { computed } from \"vue\";\nimport type { Option } from \"~/registry/default/ui/multi-select\";\n\ninterface MultySelectProps {\n  defaultOptions?: Option[];\n  /** manually controlled options */\n  options: Option[];\n  placeholder?: string;\n  hideClearAllButton?: boolean;\n}\n\nconst query = defineModel<string>(\"query\", {\n  default: \"\",\n});\n\nconst modelValue = defineModel<Option[]>(\"modelValue\", {\n  default: () => [],\n});\n\nconst { defaultOptions, options, placeholder } =\n  defineProps<MultySelectProps>();\n\nconst emits = defineEmits<{\n  (e: \"update:modelValue\", payload: Option[]): void;\n  (e: \"update:query\", payload: string): void;\n}>();\n\nconst { contains } = useFilter({ sensitivity: \"base\" });\n\nconst filteredOptions = computed(() =>\n  options.filter(\n    (option) =>\n      contains(option.value, query.value) &&\n      !modelValue.value.some((item) => item.value === option.value),\n  ),\n);\n\nwatch(\n  modelValue,\n  () => {\n    query.value = \"\";\n  },\n  { deep: true },\n);\n\nconst removeTag = (index: number) => {\n  modelValue.value = modelValue.value.filter((item, i) => i !== index);\n};\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"modelValue\" multiple ignore-filter>\n    <ComboboxAnchor class=\"w-full\">\n      <TagsInputRoot\n        v-model=\"modelValue\"\n        @removeTag=\"() => console.log('removeTag')\"\n        delimiter=\"\"\n        class=\"border-input focus-within:border-ring focus-within:ring-ring/50 has-aria-invalid:ring-destructive/20 dark:has-aria-invalid:ring-destructive/40 has-aria-invalid:border-destructive relative min-h-[38px] cursor-text rounded-md border p-1 text-sm transition-[color,box-shadow] outline-none focus-within:ring-[3px] has-disabled:pointer-events-none has-disabled:cursor-not-allowed has-disabled:opacity-50\"\n        :class=\"{\n          'pe-9': !hideClearAllButton,\n        }\"\n      >\n        <div class=\"flex flex-wrap gap-1\">\n          <TagsInputItem\n            v-for=\"(item, index) in modelValue\"\n            :key=\"item.value\"\n            :value=\"item.label\"\n            class=\"animate-fadeIn bg-background text-secondary-foreground hover:bg-background relative inline-flex h-7 cursor-default items-center rounded-md border ps-2 pe-7 pl-2 text-xs font-medium transition-all disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 data-fixed:pe-2\"\n          >\n            <TagsInputItemText />\n            <TagsInputItemDelete\n              @click=\"() => removeTag(index)\"\n              class=\"text-muted-foreground/80 hover:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 absolute -inset-y-px -end-px flex size-7 items-center justify-center rounded-e-md border border-transparent p-0 outline-hidden transition-[color,box-shadow] outline-none focus-visible:ring-[3px]\"\n            >\n              <LucideX class=\"size-4\" aria-hidden=\"true\" />\n            </TagsInputItemDelete>\n          </TagsInputItem>\n\n          <ComboboxInput v-model=\"query\" as-child>\n            <TagsInputInput\n              placeholder=\"Select frameworks\"\n              class=\"placeholder:text-muted-foreground/70 flex-1 bg-transparent px-2 py-1 outline-hidden disabled:cursor-not-allowed\"\n              :class=\"{\n                '-ml-1': modelValue.length !== 0,\n              }\"\n              @keydown.enter.prevent\n            />\n          </ComboboxInput>\n        </div>\n        <button\n          v-if=\"!hideClearAllButton && modelValue.length\"\n          type=\"button\"\n          class=\"text-muted-foreground/80 hover:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 absolute end-0 top-0 flex size-9 items-center justify-center rounded-md border border-transparent transition-[color,box-shadow] outline-none focus-visible:ring-[3px]\"\n          aria-label=\"Clear all\"\n          @click=\"() => (modelValue = [])\"\n        >\n          <LucideX class=\"size-4\" aria-hidden=\"true\" />\n        </button>\n      </TagsInputRoot>\n    </ComboboxAnchor>\n\n    <ComboboxList class=\"w-(--reka-combobox-trigger-width)\">\n      <ComboboxEmpty class=\"px-2 py-4\">No results found.</ComboboxEmpty>\n\n      <ComboboxGroup v-if=\"filteredOptions.length\">\n        <ComboboxItem\n          v-for=\"option in filteredOptions\"\n          :key=\"option.value\"\n          :value=\"option\"\n          :disabled=\"option.disabled\"\n        >\n          {{ option.label }}\n\n          <ComboboxItemIndicator>\n            <LucideCheck class=\"ml-auto size-4\" />\n          </ComboboxItemIndicator>\n        </ComboboxItem>\n      </ComboboxGroup>\n    </ComboboxList>\n  </ComboboxRoot>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/multi-select/index.ts",
      "content": "export interface Option {\n  value: string;\n  label: string;\n  disabled?: boolean;\n  fixed?: boolean;\n  [key: string]: string | boolean | undefined;\n}\n\nexport { default as MultiSelect } from \"./MultiSelect.vue\";\n",
      "type": "registry:ui"
    }
  ],
  "dependencies": [
    "lucide-vue-next",
    "reka-ui"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/combobox.json"
  ]
}