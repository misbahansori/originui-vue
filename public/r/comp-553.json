{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-553",
  "type": "registry:component",
  "dependencies": ["lucide-vue-next"],
  "registryDependencies": [
    "https://originui-vue.com/r/use-file-upload.json",
    "https://originui-vue.com/r/button.json"
  ],
  "files": [
    {
      "path": "components/comp-553.vue",
      "content": "<script setup lang=\"ts\">\nimport {\n  LucideAlertCircle,\n  LucideFile,\n  LucideFileArchive,\n  LucideFileSpreadsheet,\n  LucideFileText,\n  LucideHeadphones,\n  LucideImage,\n  LucideTrash2,\n  LucideUpload,\n  LucideVideo,\n  LucideX,\n} from \"lucide-vue-next\";\nimport { ref } from \"vue\";\n\nimport { Button } from \"@/registry/default/ui/button\";\n\nconst initialFiles = [\n  {\n    id: \"intro.zip-1744638436563-8u5xuls\",\n    name: \"intro.zip\",\n    size: 252873,\n    type: \"application/zip\",\n    url: \"https://example.com/intro.zip\",\n  },\n  {\n    id: \"image-01-123456789\",\n    name: \"image-01.jpg\",\n    size: 1528737,\n    type: \"image/jpeg\",\n    url: \"https://picsum.photos/1000/800?grayscale&random=1\",\n  },\n  {\n    id: \"audio-123456789\",\n    name: \"audio.mp3\",\n    size: 1528737,\n    type: \"audio/mpeg\",\n    url: \"https://example.com/audio.mp3\",\n  },\n];\n\nconst getFileIcon = (file: { file: File | { type: string; name: string } }) => {\n  const iconMap = {\n    pdf: {\n      icon: LucideFileText,\n      conditions: (type: string, name: string) =>\n        type.includes(\"pdf\") ||\n        name.endsWith(\".pdf\") ||\n        type.includes(\"word\") ||\n        name.endsWith(\".doc\") ||\n        name.endsWith(\".docx\"),\n    },\n    archive: {\n      icon: LucideFileArchive,\n      conditions: (type: string, name: string) =>\n        type.includes(\"zip\") ||\n        type.includes(\"archive\") ||\n        name.endsWith(\".zip\") ||\n        name.endsWith(\".rar\"),\n    },\n    excel: {\n      icon: LucideFileSpreadsheet,\n      conditions: (type: string, name: string) =>\n        type.includes(\"excel\") ||\n        name.endsWith(\".xls\") ||\n        name.endsWith(\".xlsx\"),\n    },\n    video: {\n      icon: LucideVideo,\n      conditions: (type: string) => type.includes(\"video/\"),\n    },\n    audio: {\n      icon: LucideHeadphones,\n      conditions: (type: string) => type.includes(\"audio/\"),\n    },\n    image: {\n      icon: LucideImage,\n      conditions: (type: string) => type.startsWith(\"image/\"),\n    },\n  };\n\n  for (const { icon: Icon, conditions } of Object.values(iconMap)) {\n    if (conditions(file.file.type, file.file.name)) {\n      return Icon;\n    }\n  }\n\n  return LucideFile;\n};\n\nconst getFilePreview = (file: {\n  file: File | { type: string; name: string; url?: string };\n}) => {\n  if (file.file.type.startsWith(\"image/\")) {\n    if (file.file instanceof File) {\n      const previewUrl = URL.createObjectURL(file.file);\n      return {\n        type: \"img\",\n        props: {\n          src: previewUrl,\n          alt: file.file.name,\n          class: \"size-full  object-cover\",\n        },\n      };\n    } else if (file.file.url) {\n      return {\n        type: \"img\",\n        props: {\n          src: file.file.url,\n          alt: file.file.name,\n          class: \"size-full  object-cover\",\n        },\n      };\n    } else {\n      return {\n        type: LucideImage,\n        props: {\n          class: \"size-5 opacity-60\",\n        },\n      };\n    }\n  }\n\n  return {\n    type: getFileIcon(file),\n    props: {\n      class: \"size-5 opacity-60\",\n    },\n  };\n};\n\n// Type for tracking upload progress\ntype UploadProgress = {\n  fileId: string;\n  progress: number;\n  completed: boolean;\n};\n\n// Function to simulate file upload with more realistic timing and progress\nconst simulateUpload = (\n  totalBytes: number,\n  onProgress: (progress: number) => void,\n  onComplete: () => void,\n) => {\n  let timeoutId: NodeJS.Timeout;\n  let uploadedBytes = 0;\n  let lastProgressReport = 0;\n\n  const simulateChunk = () => {\n    // Simulate variable network conditions with random chunk sizes\n    const chunkSize = Math.floor(Math.random() * 300000) + 2000;\n    uploadedBytes = Math.min(totalBytes, uploadedBytes + chunkSize);\n\n    // Calculate progress percentage (0-100)\n    const progressPercent = Math.floor((uploadedBytes / totalBytes) * 100);\n\n    // Only report progress if it's changed by at least 1%\n    if (progressPercent > lastProgressReport) {\n      lastProgressReport = progressPercent;\n      onProgress(progressPercent);\n    }\n\n    // Continue simulation if not complete\n    if (uploadedBytes < totalBytes) {\n      // Variable delay between 50ms and 500ms to simulate network fluctuations (reduced for faster uploads)\n      const delay = Math.floor(Math.random() * 450) + 50;\n\n      // Occasionally add a longer pause to simulate network congestion (5% chance, shorter duration)\n      const extraDelay = Math.random() < 0.05 ? 500 : 0;\n\n      timeoutId = setTimeout(simulateChunk, delay + extraDelay);\n    } else {\n      // Upload complete\n      onComplete();\n    }\n  };\n\n  // Start the simulation\n  timeoutId = setTimeout(simulateChunk, 100);\n\n  // Return a cleanup function to cancel the simulation\n  return () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  };\n};\n\nconst maxSizeMB = 5;\nconst maxSize = maxSizeMB * 1024 * 1024; // 5MB default\nconst maxFiles = 6;\n\n// State to track upload progress for each file\nconst uploadProgress = ref<UploadProgress[]>([]);\n\n// Function to handle newly added files\nconst handleFilesAdded = (addedFiles: FileWithPreview[]) => {\n  // Initialize progress tracking for each new file\n  const newProgressItems = addedFiles.map((file) => ({\n    fileId: file.id,\n    progress: 0,\n    completed: false,\n  }));\n\n  // Add new progress items to state\n  uploadProgress.value = [...uploadProgress.value, ...newProgressItems];\n\n  // Store cleanup functions\n  const cleanupFunctions: Array<() => void> = [];\n\n  // Start simulated upload for each file\n  addedFiles.forEach((file) => {\n    const fileSize =\n      file.file instanceof File ? file.file.size : file.file.size;\n\n    // Start the upload simulation and store the cleanup function\n    const cleanup = simulateUpload(\n      fileSize,\n      // Progress callback\n      (progress) => {\n        uploadProgress.value = uploadProgress.value.map((item) =>\n          item.fileId === file.id ? { ...item, progress } : item,\n        );\n      },\n      // Complete callback\n      () => {\n        uploadProgress.value = uploadProgress.value.map((item) =>\n          item.fileId === file.id ? { ...item, completed: true } : item,\n        );\n      },\n    );\n\n    cleanupFunctions.push(cleanup);\n  });\n\n  // Return a cleanup function that cancels all animations\n  return () => {\n    cleanupFunctions.forEach((cleanup) => cleanup());\n  };\n};\n\n// Remove the progress tracking for the file\nconst handleFileRemoved = (fileId: string) => {\n  uploadProgress.value = uploadProgress.value.filter(\n    (item) => item.fileId !== fileId,\n  );\n};\n\nconst {\n  files,\n  isDragging,\n  errors,\n  handleDragEnter,\n  handleDragLeave,\n  handleDragOver,\n  handleDrop,\n  openFileDialog,\n  removeFile,\n  clearFiles,\n  getInputProps,\n} = useFileUpload({\n  multiple: true,\n  maxFiles,\n  maxSize,\n  initialFiles,\n  onFilesAdded: handleFilesAdded,\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2\">\n    <!-- Drop area -->\n    <div\n      @dragenter=\"handleDragEnter\"\n      @dragleave=\"handleDragLeave\"\n      @dragover=\"handleDragOver\"\n      @drop=\"handleDrop\"\n      :data-dragging=\"isDragging || undefined\"\n      :data-files=\"files.length > 0 || undefined\"\n      class=\"border-input data-[dragging=true]:bg-accent/50 has-[input:focus]:border-ring has-[input:focus]:ring-ring/50 relative flex min-h-52 flex-col items-center overflow-hidden rounded-xl border border-dashed p-4 transition-colors not-data-[files]:justify-center has-[input:focus]:ring-[3px]\"\n    >\n      <input\n        v-bind=\"getInputProps()\"\n        class=\"sr-only\"\n        aria-label=\"Upload image file\"\n      />\n      <div v-if=\"files.length > 0\" class=\"flex w-full flex-col gap-3\">\n        <div class=\"flex items-center justify-between gap-2\">\n          <h3 class=\"truncate text-sm font-medium\">\n            Files ({{ files.length }})\n          </h3>\n          <div class=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" @click=\"openFileDialog\">\n              <LucideUpload\n                class=\"-ms-0.5 size-3.5 opacity-60\"\n                aria-hidden=\"true\"\n              />\n              Add files\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              @click=\"\n                () => {\n                  // Clear all progress tracking\n                  uploadProgress = [];\n                  clearFiles();\n                }\n              \"\n            >\n              <LucideTrash2\n                class=\"-ms-0.5 size-3.5 opacity-60\"\n                aria-hidden=\"true\"\n              />\n              Remove all\n            </Button>\n          </div>\n        </div>\n\n        <div class=\"w-full space-y-2\">\n          <div\n            v-for=\"file in files\"\n            :key=\"file.id\"\n            :data-uploading=\"\n              uploadProgress.find((p) => p.fileId === file.id)?.completed ===\n                false || undefined\n            \"\n            class=\"bg-background flex flex-col gap-1 rounded-lg border p-2 pe-3 transition-opacity duration-300\"\n          >\n            <div class=\"flex items-center justify-between gap-2\">\n              <div\n                class=\"flex items-center gap-3 overflow-hidden in-data-[uploading=true]:opacity-50\"\n              >\n                <div\n                  class=\"flex aspect-square size-10 shrink-0 items-center justify-center overflow-hidden rounded border\"\n                >\n                  <component\n                    :is=\"getFilePreview(file).type\"\n                    v-bind=\"getFilePreview(file).props\"\n                  />\n                </div>\n                <div class=\"flex min-w-0 flex-col gap-0.5\">\n                  <p class=\"truncate text-[13px] font-medium\">\n                    {{ file.file.name }}\n                  </p>\n                  <p class=\"text-muted-foreground text-xs\">\n                    {{ formatBytes(file.file.size) }}\n                  </p>\n                </div>\n              </div>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                class=\"text-muted-foreground/80 hover:text-foreground -me-2 size-8 hover:bg-transparent\"\n                @click=\"\n                  () => {\n                    handleFileRemoved(file.id);\n                    removeFile(file.id);\n                  }\n                \"\n                aria-label=\"Remove file\"\n              >\n                <LucideX class=\"size-4\" aria-hidden=\"true\" />\n              </Button>\n            </div>\n\n            <!-- Upload progress bar -->\n            <div\n              v-if=\"\n                uploadProgress.find((p) => p.fileId === file.id)?.completed ===\n                false\n              \"\n              class=\"mt-1 flex items-center gap-2\"\n            >\n              <div\n                class=\"h-1.5 w-full overflow-hidden rounded-full bg-gray-100\"\n              >\n                <div\n                  class=\"bg-primary h-full transition-all duration-300 ease-out\"\n                  :style=\"{\n                    width: `${uploadProgress.find((p) => p.fileId === file.id)?.progress || 0}%`,\n                  }\"\n                />\n              </div>\n              <span class=\"text-muted-foreground w-10 text-xs tabular-nums\">\n                {{\n                  uploadProgress.find((p) => p.fileId === file.id)?.progress ||\n                  0\n                }}%\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        v-else\n        class=\"flex flex-col items-center justify-center px-4 py-3 text-center\"\n      >\n        <div\n          class=\"bg-background mb-2 flex size-11 shrink-0 items-center justify-center rounded-full border\"\n          aria-hidden=\"true\"\n        >\n          <LucideImage class=\"size-4 opacity-60\" />\n        </div>\n        <p class=\"mb-1.5 text-sm font-medium\">Drop your files here</p>\n        <p class=\"text-muted-foreground text-xs\">\n          Max {{ maxFiles }} files ∙ Up to {{ maxSizeMB }}MB\n        </p>\n        <Button variant=\"outline\" class=\"mt-4\" @click=\"openFileDialog\">\n          <LucideUpload class=\"-ms-1 opacity-60\" aria-hidden=\"true\" />\n          Select images\n        </Button>\n      </div>\n    </div>\n\n    <div\n      v-if=\"errors.length > 0\"\n      class=\"text-destructive flex items-center gap-1 text-xs\"\n      role=\"alert\"\n    >\n      <LucideAlertCircle class=\"size-3 shrink-0\" />\n      <span>{{ errors[0] }}</span>\n    </div>\n\n    <p\n      aria-live=\"polite\"\n      role=\"region\"\n      class=\"text-muted-foreground mt-2 text-center text-xs\"\n    >\n      With simulated progress track ∙\n      <a\n        href=\"https://github.com/origin-space/originui/tree/main/docs/use-file-upload.md\"\n        class=\"hover:text-foreground underline\"\n      >\n        API\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": { "tags": ["upload", "file"], "colSpan": 2 }
}
