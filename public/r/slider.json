{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:ui",
  "dependencies": ["reka-ui"],
  "registryDependencies": ["tooltip"],
  "files": [
    {
      "path": "ui/slider/Slider.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from \"@/lib/utils\";\nimport type { SliderRootEmits, SliderRootProps } from \"reka-ui\";\nimport {\n  SliderRange,\n  SliderRoot,\n  SliderThumb,\n  SliderTrack,\n  useForwardPropsEmits,\n} from \"reka-ui\";\nimport { computed, type HTMLAttributes } from \"vue\";\n\nconst props = defineProps<\n  SliderRootProps & {\n    class?: HTMLAttributes[\"class\"];\n    showTooltip?: boolean;\n  }\n>();\nconst emits = defineEmits<SliderRootEmits>();\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props;\n\n  return delegated;\n});\n\nconst forwarded = useForwardPropsEmits(delegatedProps, emits);\n\nconst showTooltipState = ref(false);\n\nconst handlePointerDown = () => {\n  if (props.showTooltip) {\n    showTooltipState.value = true;\n  }\n};\n\nconst handlePointerUp = () => {\n  if (props.showTooltip) {\n    showTooltipState.value = false;\n  }\n};\n\nonMounted(() => {\n  if (props.showTooltip) {\n    document.addEventListener(\"pointerup\", handlePointerUp);\n  }\n});\n\nonUnmounted(() => {\n  if (props.showTooltip) {\n    document.removeEventListener(\"pointerup\", handlePointerUp);\n  }\n});\n</script>\n\n<template>\n  <SliderRoot\n    data-slot=\"slider\"\n    :class=\"\n      cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        props.class,\n      )\n    \"\n    v-bind=\"forwarded\"\n  >\n    <SliderTrack\n      data-slot=\"slider-track\"\n      class=\"bg-muted relative my-1 grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n    >\n      <SliderRange\n        data-slot=\"slider-range\"\n        class=\"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n      />\n    </SliderTrack>\n    <template v-if=\"showTooltip\">\n      <TooltipProvider v-for=\"(_, key) in modelValue\" :key=\"key\">\n        <Tooltip :open=\"showTooltipState\">\n          <TooltipTrigger asChild>\n            <SliderThumb\n              as=\"span\"\n              class=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50\"\n              data-slot=\"slider-thumb\"\n              @pointerdown=\"handlePointerDown\"\n            />\n          </TooltipTrigger>\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            :sideOffset=\"8\"\n            :side=\"props.orientation === 'vertical' ? 'right' : 'top'\"\n          >\n            {{ modelValue?.[key] }}\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    </template>\n    <template v-else>\n      <SliderThumb\n        v-for=\"(_, key) in modelValue\"\n        :key=\"key\"\n        as=\"span\"\n        class=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 focus-visible:ring-4 disabled:pointer-events-none disabled:opacity-50\"\n      />\n    </template>\n  </SliderRoot>\n</template>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/slider/SliderWithInput.vue",
      "content": "<script setup lang=\"ts\">\nconst props = defineProps<{\n  label: string;\n  minValue: number;\n  maxValue: number;\n  initialValue: number[];\n  defaultValue: number[];\n}>();\n\nconst {\n  sliderValues,\n  inputValues,\n  validateAndUpdateValue,\n  handleInputChange,\n  handleSliderChange,\n  resetToDefault,\n} = useSliderWithInput(props);\n\ndefineExpose({\n  resetToDefault,\n});\n</script>\n\n<template>\n  <div class=\"flex items-center gap-2\">\n    <Label class=\"text-muted-foreground text-xs\">{{ label }}</Label>\n    <Slider\n      :model-value=\"sliderValues\"\n      :min=\"minValue\"\n      :max=\"maxValue\"\n      @update:model-value=\"handleSliderChange\"\n      class=\"grow [&>:last-child>span]:rounded\"\n    />\n    <Input\n      class=\"h-8 w-12 px-2 py-1 text-center\"\n      type=\"text\"\n      inputmode=\"decimal\"\n      :model-value=\"inputValues[0]\"\n      @update:model-value=\"(newValue) => handleInputChange(0, newValue)\"\n      @blur=\"() => validateAndUpdateValue(inputValues[0] ?? '', 0)\"\n      @keydown.enter=\"validateAndUpdateValue(inputValues[0] ?? '', 0)\"\n    />\n  </div>\n</template>\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/slider/index.ts",
      "content": "export { default as Slider } from \"./Slider.vue\";\nexport { default as SliderWithInput } from \"./SliderWithInput.vue\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
