{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-552",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-552.vue",
      "content": "<script setup lang=\"ts\">\nimport { formatBytes, useFileUpload } from \"@/composables/useFileUpload\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  LucideAlertCircle,\n  LucideFile,\n  LucideFileArchive,\n  LucideFileSpreadsheet,\n  LucideFileText,\n  LucideFileUp,\n  LucideHeadphones,\n  LucideImage,\n  LucideTrash2,\n  LucideVideo,\n  LucideX,\n} from \"lucide-vue-next\";\n\nconst initialFiles = [\n  {\n    name: \"intro.zip\",\n    size: 252873,\n    type: \"application/zip\",\n    url: \"https://example.com/intro.zip\",\n    id: \"intro.zip-1744638436563-8u5xuls\",\n  },\n  {\n    name: \"image-01.jpg\",\n    size: 1528737,\n    type: \"image/jpeg\",\n    url: \"https://picsum.photos/1000/800?grayscale&random=1\",\n    id: \"image-01-123456789\",\n  },\n  {\n    name: \"audio.mp3\",\n    size: 1528737,\n    type: \"audio/mpeg\",\n    url: \"https://example.com/audio.mp3\",\n    id: \"audio-123456789\",\n  },\n];\n\nconst getFileIcon = (file: { file: File | { type: string; name: string } }) => {\n  const fileType = file.file instanceof File ? file.file.type : file.file.type;\n  const fileName = file.file instanceof File ? file.file.name : file.file.name;\n\n  const iconMap = {\n    pdf: {\n      icon: LucideFileText,\n      conditions: (type: string, name: string) =>\n        type.includes(\"pdf\") ||\n        name.endsWith(\".pdf\") ||\n        type.includes(\"word\") ||\n        name.endsWith(\".doc\") ||\n        name.endsWith(\".docx\"),\n    },\n    archive: {\n      icon: LucideFileArchive,\n      conditions: (type: string, name: string) =>\n        type.includes(\"zip\") ||\n        type.includes(\"archive\") ||\n        name.endsWith(\".zip\") ||\n        name.endsWith(\".rar\"),\n    },\n    excel: {\n      icon: LucideFileSpreadsheet,\n      conditions: (type: string, name: string) =>\n        type.includes(\"excel\") ||\n        name.endsWith(\".xls\") ||\n        name.endsWith(\".xlsx\"),\n    },\n    video: {\n      icon: LucideVideo,\n      conditions: (type: string) => type.includes(\"video/\"),\n    },\n    audio: {\n      icon: LucideHeadphones,\n      conditions: (type: string) => type.includes(\"audio/\"),\n    },\n    image: {\n      icon: LucideImage,\n      conditions: (type: string) => type.startsWith(\"image/\"),\n    },\n  };\n\n  for (const { icon, conditions } of Object.values(iconMap)) {\n    if (conditions(fileType, fileName)) {\n      return icon;\n    }\n  }\n\n  return LucideFile;\n};\n\nconst getFilePreview = (file: {\n  file: File | { type: string; name: string; url?: string };\n}) => {\n  const fileType = file.file instanceof File ? file.file.type : file.file.type;\n  const fileName = file.file instanceof File ? file.file.name : file.file.name;\n\n  if (fileType.startsWith(\"image/\")) {\n    if (file.file instanceof File) {\n      return {\n        type: \"image\",\n        url: URL.createObjectURL(file.file),\n        alt: fileName,\n      };\n    } else if (file.file.url) {\n      return {\n        type: \"image\",\n        url: file.file.url,\n        alt: fileName,\n      };\n    }\n  }\n  return {\n    type: \"icon\",\n    component: getFileIcon(file),\n  };\n};\n\nconst maxSizeMB = 5;\nconst maxSize = maxSizeMB * 1024 * 1024; // 5MB default\nconst maxFiles = 6;\n\nconst {\n  files,\n  errors,\n  dropzoneRef,\n  openFileDialog,\n  removeFile,\n  clearFiles,\n  inputRef,\n} = useFileUpload({\n  multiple: true,\n  maxFiles,\n  maxSize,\n  initialFiles,\n});\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2\">\n    <!-- Drop area -->\n    <div\n      ref=\"dropzoneRef\"\n      :data-files=\"files.length > 0 || undefined\"\n      class=\"border-input data-[dragging=true]:bg-accent/50 has-[input:focus]:border-ring has-[input:focus]:ring-ring/50 relative flex min-h-52 flex-col items-center overflow-hidden rounded-xl border border-dashed p-4 transition-colors not-data-[files]:justify-center has-[input:focus]:ring-[3px]\"\n    >\n      <input ref=\"inputRef\" aria-label=\"Upload image file\" />\n      <div v-if=\"files.length > 0\" class=\"flex w-full flex-col gap-3\">\n        <div class=\"flex items-center justify-between gap-2\">\n          <h3 class=\"truncate text-sm font-medium\">\n            Files ({{ files.length }})\n          </h3>\n          <div class=\"flex gap-2\">\n            <Button size=\"sm\" variant=\"outline\" @click=\"openFileDialog\">\n              <LucideFileUp\n                class=\"-ms-0.5 size-3.5 opacity-60\"\n                aria-hidden=\"true\"\n              />\n              Add files\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" @click=\"clearFiles\">\n              <LucideTrash2\n                class=\"-ms-0.5 size-3.5 opacity-60\"\n                aria-hidden=\"true\"\n              />\n              Remove all\n            </Button>\n          </div>\n        </div>\n\n        <div class=\"grid grid-cols-2 gap-4 md:grid-cols-3\">\n          <div v-for=\"file in files\" :key=\"file.id\" class=\"relative\">\n            <div\n              class=\"bg-background relative flex flex-col overflow-hidden rounded-md border\"\n            >\n              <div\n                class=\"bg-accent flex aspect-square items-center justify-center overflow-hidden\"\n              >\n                <img\n                  v-if=\"getFilePreview(file).type === 'image'\"\n                  :src=\"getFilePreview(file).url\"\n                  :alt=\"getFilePreview(file).alt\"\n                  class=\"size-full object-cover\"\n                />\n                <component\n                  v-else\n                  :is=\"getFilePreview(file).component\"\n                  class=\"size-5 opacity-60\"\n                />\n              </div>\n              <div class=\"flex min-w-0 flex-col gap-0.5 border-t p-3\">\n                <p class=\"truncate text-[13px] font-medium\">\n                  {{ file.file.name }}\n                </p>\n                <p class=\"text-muted-foreground truncate text-xs\">\n                  {{ formatBytes(file.file.size) }}\n                </p>\n              </div>\n            </div>\n            <Button\n              size=\"icon\"\n              class=\"border-background focus-visible:border-background absolute -top-2 -right-2 size-6 rounded-full border-2 shadow-none\"\n              @click=\"removeFile(file.id)\"\n              aria-label=\"Remove file\"\n            >\n              <LucideX class=\"size-3.5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div\n        v-else\n        class=\"flex flex-col items-center justify-center px-4 py-3 text-center\"\n      >\n        <div\n          class=\"bg-background mb-2 flex size-11 shrink-0 items-center justify-center rounded-full border\"\n          aria-hidden=\"true\"\n        >\n          <LucideImage class=\"size-4 opacity-60\" />\n        </div>\n        <p class=\"mb-1.5 text-sm font-medium\">Drop your files here</p>\n        <p class=\"text-muted-foreground text-xs\">\n          Max {{ maxFiles }} files âˆ™ Up to {{ maxSizeMB }}MB\n        </p>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          class=\"mt-4\"\n          @click=\"openFileDialog\"\n        >\n          <LucideFileUp class=\"-ms-1 opacity-60\" aria-hidden=\"true\" />\n          Select images\n        </Button>\n      </div>\n    </div>\n\n    <div\n      v-if=\"errors.length > 0\"\n      class=\"text-destructive flex items-center gap-1 text-xs\"\n      role=\"alert\"\n    >\n      <LucideAlertCircle class=\"size-3 shrink-0\" />\n      <span>{{ errors[0] }}</span>\n    </div>\n\n    <p\n      aria-live=\"polite\"\n      role=\"region\"\n      class=\"text-muted-foreground mt-2 text-center text-xs\"\n    >\n      Mixed content w/ card\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "upload",
      "file"
    ],
    "colSpan": 2
  },
  "dependencies": [
    "lucide-vue-next"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/useFileUpload.json",
    "https://originui-vue.com/r/button.json"
  ]
}