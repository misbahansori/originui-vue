{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "comp-505",
  "type": "registry:component",
  "files": [
    {
      "path": "components/comp-505.vue",
      "content": "<script lang=\"ts\" setup>\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  CalendarCell,\n  CalendarCellTrigger,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHead,\n  CalendarGridRow,\n  CalendarHeadCell,\n  CalendarHeader,\n  CalendarHeading,\n  CalendarNextButton,\n  CalendarPrevButton,\n} from \"@/registry/default/ui/calendar\";\nimport { ScrollArea } from \"@/registry/default/ui/scroll-area\";\nimport {\n  CalendarDateTime,\n  getLocalTimeZone,\n  today,\n} from \"@internationalized/date\";\nimport { formatDate } from \"@vueuse/core\";\nimport { CalendarRoot } from \"reka-ui\";\n\nconst todayDate = today(getLocalTimeZone());\nconst modelValue = ref(\n  new CalendarDateTime(\n    todayDate.year,\n    todayDate.month,\n    todayDate.day,\n    12,\n    30,\n    0,\n  ),\n);\n\nconst timeSlots = [\n  { time: \"09:00\", available: false },\n  { time: \"09:30\", available: false },\n  { time: \"10:00\", available: true },\n  { time: \"10:30\", available: true },\n  { time: \"11:00\", available: true },\n  { time: \"11:30\", available: true },\n  { time: \"12:00\", available: false },\n  { time: \"12:30\", available: true },\n  { time: \"13:00\", available: true },\n  { time: \"13:30\", available: true },\n  { time: \"14:00\", available: true },\n  { time: \"14:30\", available: false },\n  { time: \"15:00\", available: false },\n  { time: \"15:30\", available: true },\n  { time: \"16:00\", available: true },\n  { time: \"16:30\", available: true },\n  { time: \"17:00\", available: true },\n  { time: \"17:30\", available: true },\n];\n\nconst handleTimeClick = (time: string) => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n  modelValue.value = new CalendarDateTime(\n    modelValue.value.year,\n    modelValue.value.month,\n    modelValue.value.day,\n    hours,\n    minutes,\n  );\n};\n\nconst isSelectedTime = (time: string) => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n  return modelValue.value.hour === hours && modelValue.value.minute === minutes;\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"rounded-md border p-3\">\n      <div class=\"flex gap-4 max-sm:flex-col\">\n        <CalendarRoot\n          v-model=\"modelValue\"\n          v-slot=\"{ grid, weekDays }\"\n          data-slot=\"calendar\"\n        >\n          <CalendarHeader>\n            <CalendarHeading />\n            <div class=\"flex items-center gap-1\">\n              <CalendarPrevButton class=\"absolute left-1\" />\n              <CalendarNextButton class=\"absolute right-1\" />\n            </div>\n          </CalendarHeader>\n          <div\n            class=\"mt-4 flex flex-col gap-y-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\"\n          >\n            <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\n              <CalendarGridHead>\n                <CalendarGridRow>\n                  <CalendarHeadCell v-for=\"day in weekDays\" :key=\"day\">\n                    {{ day }}\n                  </CalendarHeadCell>\n                </CalendarGridRow>\n              </CalendarGridHead>\n              <CalendarGridBody>\n                <CalendarGridRow\n                  v-for=\"(weekDates, index) in month.rows\"\n                  :key=\"`weekDate-${index}`\"\n                  class=\"mt-2 w-full\"\n                >\n                  <CalendarCell\n                    v-for=\"weekDate in weekDates\"\n                    :key=\"weekDate.toString()\"\n                    :date=\"weekDate\"\n                  >\n                    <CalendarCellTrigger :day=\"weekDate\" :month=\"month.value\" />\n                  </CalendarCell>\n                </CalendarGridRow>\n              </CalendarGridBody>\n            </CalendarGrid>\n          </div>\n        </CalendarRoot>\n        <div class=\"relative w-full max-sm:h-48 sm:w-40\">\n          <div class=\"absolute inset-0 max-sm:border-t\">\n            <ScrollArea class=\"h-full sm:border-s\">\n              <div class=\"space-y-3\">\n                <div class=\"flex h-5 shrink-0 items-center px-5\">\n                  <p class=\"text-sm font-medium\">\n                    {{\n                      formatDate(\n                        modelValue.toDate(getLocalTimeZone()),\n                        \"dddd, D\",\n                      )\n                    }}\n                  </p>\n                </div>\n                <div class=\"grid gap-1.5 px-5 max-sm:grid-cols-2\">\n                  <Button\n                    v-for=\"time in timeSlots\"\n                    :key=\"time.time\"\n                    :variant=\"isSelectedTime(time.time) ? 'default' : 'outline'\"\n                    size=\"sm\"\n                    class=\"w-full\"\n                    :disabled=\"!time.available\"\n                    @click=\"handleTimeClick(time.time)\"\n                  >\n                    {{ time.time }}\n                  </Button>\n                </div>\n              </div>\n            </ScrollArea>\n          </div>\n        </div>\n      </div>\n    </div>\n    <p class=\"text-muted-foreground mt-4 text-center text-xs\">\n      Appointment Picker -\n      <a\n        class=\"hover:text-foreground underline\"\n        href=\"https://reka-ui.com/docs/components/calendar#calendar\"\n        target=\"_blank\"\n        rel=\"noopener nofollow\"\n      >\n        Reka UI Calendar\n      </a>\n    </p>\n  </div>\n</template>\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "calendar",
      "date",
      "time",
      "button",
      "react daypicker"
    ],
    "colSpan": 3,
    "style": 1
  },
  "dependencies": [
    "@internationalized",
    "@vueuse/core",
    "reka-ui"
  ],
  "registryDependencies": [
    "https://originui-vue.com/r/button.json",
    "https://originui-vue.com/r/calendar.json",
    "https://originui-vue.com/r/scroll-area.json"
  ]
}